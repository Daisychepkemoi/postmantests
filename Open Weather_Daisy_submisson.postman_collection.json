{
	"info": {
		"_postman_id": "c59178f6-7643-4173-a352-f30f9fc6f814",
		"name": "Open Weather",
		"description": "This Open Weather API demonstrates how a user can access current weather data for any location.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "20403849"
	},
	"item": [
		{
			"name": "Get Weather",
			"item": [
				{
					"name": "Get weather via longitude&latitude",
					"item": [
						{
							"name": "Get weather data via longitude&latitude success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var responseJsonData = JSON.parse(responseBody);",
											"pm.test(\"Get Weather endpoint via longitude and latitude returns the status code 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Get Weather endpoint via longitude and latitude API responds within the expected responsetimeThreshold\", () => {",
											" ",
											"  const expectedResponseTimeThresholdInMs = 5000;",
											"  pm.expect(pm.response.responseTime).to.be.lessThan(",
											"    expectedResponseTimeThresholdInMs,",
											"    `The endpoint did not respond within ${expectedResponseTimeThresholdInMs} ms. Response came in ${pm.response.responseTime} ms`",
											"  );",
											"});",
											"pm.test(\"Get Weather endpoint via longitude and latitude API response Has expecxted params \", () => {",
											" ",
											"  const expectedResponseTimeThresholdInMs = 5000;",
											"  pm.expect(pm.response.responseTime).to.be.lessThan(",
											"    expectedResponseTimeThresholdInMs,",
											"    `The endpoint did not respond within ${expectedResponseTimeThresholdInMs} ms. Response came in ${pm.response.responseTime} ms`",
											"  );",
											"});",
											"",
											"",
											"pm.test(\"Get Weather endpoint via longitude and latitude response body containes key parameter values\", function () { ",
											"    //depending on the key params to be consumed, we need to assert that those key params are actually being returned by the endpoint. i picked some random params to assert here",
											"    pm.expect(pm.response.text()).to.include(\"temp\");",
											"    pm.expect(pm.response.text()).to.include(\"humidity\");",
											"    pm.expect(pm.response.text()).to.include(\"weather\");",
											"    pm.expect(pm.response.text()).to.include(\"clouds\");",
											"    pm.expect(pm.response.text()).to.include(\"pressure\");",
											"    pm.expect(pm.response.text()).to.include(\"timezone\");",
											"});",
											"",
											"pm.test(\"The endpoint Get Weather via longitude and latitude response body contains actual data of the longitude and latitude being requested\", function () { ",
											"    pm.expect(responseJsonData.lat).to.eqls(parseFloat(pm.environment.get(\"latitude\")), `EXPECTED ${responseJsonData.lat} to be equal to parseFloat(${pm.environment.get(\"latitude\")})`);",
											"    // console.log(\"***** \" + responseJsonData.lon)",
											"    pm.expect(parseFloat(responseJsonData.lon)).to.eqls(parseFloat(pm.environment.get(\"longitude\")), `EXPECTED ${responseJsonData.lon} to be equal to parseFloat(${pm.environment.get(\"longitude\")})`);",
											"",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function generateRandomDoubleInRange(min, max) {",
											"    return (Math.random() * (max - min) + min).toFixed(2);",
											"}",
											"",
											"// on earth latitude range is in between -90 and 90 degrees ",
											"const latitude = generateRandomDoubleInRange(-90.00,90.00)",
											"",
											"// on earth  longitude range is in between -180 and 180 degrees ",
											"const longitude = generateRandomDoubleInRange(-180.00,180.00)",
											"",
											"const temperature=[\"standard\",\"metric\",\"imperial\"];",
											"const temp = Math.round(Math.random()*(temperature.length-1));",
											"pm.environment.set(\"temperature_unit\",temp);",
											"",
											"pm.environment.set(\"latitude\", parseFloat(latitude) )",
											"pm.environment.set(\"longitude\", parseFloat(longitude))",
											"",
											"//ensures that if required values are missing or not interger nor float, the test is not executed.",
											"if (pm.variables.get(\"latitude\") == null ||  pm.variables.get(\"longitude\") == null) {",
											"    throw new Error(\"latitude | longitude is aa required value\");",
											"}",
											"else if(typeof pm.variables.get(\"latitude\") === 'string' || pm.variables.get(\"latitude\") instanceof String || typeof pm.variables.get(\"longitude\") === 'string' || pm.variables.get(\"longitude\") instanceof String){",
											"    ",
											"    throw new Error(\"latitude | longitude is must be an int or float value \");",
											"}",
											"else{",
											"",
											"}",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{get_weather_base_url}}/data/{{version}}/onecall?lat={{latitude}}&lon={{longitude}}&exclude=hourly,daily&appid={{api_keys}}&units={{temperature_unit}}",
									"host": [
										"{{get_weather_base_url}}"
									],
									"path": [
										"data",
										"{{version}}",
										"onecall"
									],
									"query": [
										{
											"key": "lat",
											"value": "{{latitude}}"
										},
										{
											"key": "lon",
											"value": "{{longitude}}"
										},
										{
											"key": "exclude",
											"value": "hourly,daily"
										},
										{
											"key": "appid",
											"value": "{{api_keys}}"
										},
										{
											"key": "units",
											"value": "{{temperature_unit}}"
										},
										{
											"key": "",
											"value": "",
											"disabled": true
										}
									]
								},
								"description": "Get a success response when all required params are sent"
							},
							"response": [
								{
									"name": "Get weather data via longitude&latitude success",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://api.openweathermap.org/data/2.5/onecall?lat=&lon=&exclude=hourly,daily&appid=1712846f0f291932f5e652846e7289d2&units=",
											"protocol": "https",
											"host": [
												"api",
												"openweathermap",
												"org"
											],
											"path": [
												"data",
												"2.5",
												"onecall"
											],
											"query": [
												{
													"key": "lat",
													"value": ""
												},
												{
													"key": "lon",
													"value": ""
												},
												{
													"key": "exclude",
													"value": "hourly,daily"
												},
												{
													"key": "appid",
													"value": "1712846f0f291932f5e652846e7289d2"
												},
												{
													"key": "units",
													"value": ""
												},
												{
													"key": "",
													"value": "",
													"disabled": true
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "openresty"
										},
										{
											"key": "Date",
											"value": "Mon, 01 May 2023 12:41:16 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "397"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "X-Cache-Key",
											"value": "/data/2.5/onecall?exclude=hourly,daily&lat=-17.46&lon=101.67&units=1"
										},
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Access-Control-Allow-Credentials",
											"value": "true"
										},
										{
											"key": "Access-Control-Allow-Methods",
											"value": "GET, POST"
										}
									],
									"cookie": [],
									"body": "{\n    \"lat\": -17.46,\n    \"lon\": 101.67,\n    \"timezone\": \"Etc/GMT-7\",\n    \"timezone_offset\": 25200,\n    \"current\": {\n        \"dt\": 1682944876,\n        \"sunrise\": 1682897159,\n        \"sunset\": 1682938488,\n        \"temp\": 297.5,\n        \"feels_like\": 298.13,\n        \"pressure\": 1014,\n        \"humidity\": 82,\n        \"dew_point\": 294.23,\n        \"uvi\": 0,\n        \"clouds\": 52,\n        \"visibility\": 10000,\n        \"wind_speed\": 10.66,\n        \"wind_deg\": 133,\n        \"wind_gust\": 11.6,\n        \"weather\": [\n            {\n                \"id\": 803,\n                \"main\": \"Clouds\",\n                \"description\": \"broken clouds\",\n                \"icon\": \"04n\"\n            }\n        ]\n    }\n}"
								}
							]
						},
						{
							"name": "Get weather  via longitude&latitude missing longitude",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var responseJsonData = JSON.parse(responseBody);",
											"pm.test(\"Get Weather endpoint with missing required longitude value returns the status code 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Get weather endpoint with missing longitude value has all expected response body code\", () => {",
											" ",
											"  const expectedResponseBodyCode = \"400\";",
											"  const actualResponseBodyCode = responseJsonData.cod;",
											"  pm.expect(actualResponseBodyCode).to.eql(expectedResponseBodyCode,`Get weather endpoint with missing longitude value , We expected response Body Status code ${expectedResponseBodyCode} but got ${actualResponseBodyCode}`);",
											"  ",
											"});",
											"",
											"pm.test(\"Get weather endpoint with missing/null longitude value has all expected response body Message\", function () {",
											"  const expectedResponseBodyMessage = \"wrong longitude\";",
											"  const actualResponseBodyMessage = responseJsonData.message;",
											"  //asserting using an exact values. For apis where the response message being displayed to customers is the response message from the response body, the response message should not changed regularly. Am working with that assumption here.",
											"  pm.expect(actualResponseBodyMessage).to.eql(expectedResponseBodyMessage, `Get weather endpoint with missing longitude value ,  expected response Body Message ${expectedResponseBodyMessage} but got :::> ${actualResponseBodyMessage}`); ",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function generateRandomDoubleInRange(min, max) {",
											"    return (Math.random() * (max - min) + min).toFixed(2);",
											"}",
											"",
											"// on earth latitude range is in between -90 and 90 degrees ",
											"const latitude = generateRandomDoubleInRange(-90.00,90.00)",
											"const temperature=[\"standard\",\"metric\",\"imperial\"];",
											"const temp = Math.round(Math.random()*(temperature.length-1));",
											"pm.environment.set(\"temperature_unit\",temp);",
											"",
											"pm.environment.set(\"latitude\", latitude)",
											"pm.environment.set(\"longitude\", )",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{get_weather_base_url}}/data/{{version}}/onecall?lat={{latitude}}&lon={{longitude}}&exclude=hourly,daily&appid={{api_keys}}&units={{temperature_unit}}",
									"host": [
										"{{get_weather_base_url}}"
									],
									"path": [
										"data",
										"{{version}}",
										"onecall"
									],
									"query": [
										{
											"key": "lat",
											"value": "{{latitude}}"
										},
										{
											"key": "lon",
											"value": "{{longitude}}"
										},
										{
											"key": "exclude",
											"value": "hourly,daily"
										},
										{
											"key": "appid",
											"value": "{{api_keys}}"
										},
										{
											"key": "units",
											"value": "{{temperature_unit}}"
										},
										{
											"key": "",
											"value": "",
											"disabled": true
										}
									]
								},
								"description": "get a response when longitude value is missing"
							},
							"response": [
								{
									"name": "Get weather  via longitude&latitude missing longitude",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://api.openweathermap.org/data/2.5/onecall?lat=&lon=&exclude=hourly,daily&appid=1712846f0f291932f5e652846e7289d2&units=",
											"protocol": "https",
											"host": [
												"api",
												"openweathermap",
												"org"
											],
											"path": [
												"data",
												"2.5",
												"onecall"
											],
											"query": [
												{
													"key": "lat",
													"value": ""
												},
												{
													"key": "lon",
													"value": ""
												},
												{
													"key": "exclude",
													"value": "hourly,daily"
												},
												{
													"key": "appid",
													"value": "1712846f0f291932f5e652846e7289d2"
												},
												{
													"key": "units",
													"value": ""
												},
												{
													"key": "",
													"value": "",
													"disabled": true
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "openresty"
										},
										{
											"key": "Date",
											"value": "Mon, 01 May 2023 12:49:30 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "41"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "X-Cache-Key",
											"value": "/data/2.5/onecall?exclude=hourly,daily&lat=82.37&lon=&units=1"
										},
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Access-Control-Allow-Credentials",
											"value": "true"
										},
										{
											"key": "Access-Control-Allow-Methods",
											"value": "GET, POST"
										}
									],
									"cookie": [],
									"body": "{\n    \"cod\": \"400\",\n    \"message\": \"wrong longitude\"\n}"
								}
							]
						},
						{
							"name": "Get weather  via longitude&latitude missing latitude",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var responseJsonData = JSON.parse(responseBody);",
											"pm.test(\"Get Weather endpoint with missing required latitude value returns the status code 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Get weather endpoint with missing latitude value has all expected response body code\", () => {",
											" ",
											"  const expectedResponseBodyCode = \"400\";",
											"  const actualResponseBodyCode = responseJsonData.cod;",
											"  pm.expect(actualResponseBodyCode).to.eql(expectedResponseBodyCode, `Get weather endpoint with missing latitude value ,  expected response Body Code ${actualResponseBodyCode} but got :::> ${actualResponseBodyCode}`);",
											"  ",
											"});",
											"",
											"pm.test(\"Get weather endpoint with missing latitude value has all expected response body Message\", function () {",
											"  const expectedResponseBodyMessage = \"wrong latitude\";",
											"  const actualResponseBodyMessage = responseJsonData.message;",
											"  //asserting using an exact values. For apis where the response message being displayed to customers is the response message from the response body, the response message should not changed regularly. Am working with that assumption here.",
											"  pm.expect(actualResponseBodyMessage).to.eql(expectedResponseBodyMessage, `Get weather endpoint with missing latitude value ,  expected response Body Message ${expectedResponseBodyMessage} but got :::> ${actualResponseBodyMessage}`); ",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function generateRandomDoubleInRange(min, max) {",
											"    return (Math.random() * (max - min) + min).toFixed(2);",
											"}",
											"",
											"// on earth  longitude range is in between -180 and 180 degrees ",
											"const longitude = generateRandomDoubleInRange(-180.00,180.00)",
											"const temperature=[\"standard\",\"metric\",\"imperial\"];",
											"const temp = Math.round(Math.random()*(temperature.length-1));",
											"pm.environment.set(\"temperature_unit\",temp);",
											"pm.environment.set(\"latitude\",  )",
											"pm.environment.set(\"longitude\",longitude )",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{get_weather_base_url}}/data/{{version}}/onecall?lat={{latitude}}&lon={{longitude}}&exclude=hourly,daily&appid={{api_keys}}&units={{temperature_unit}}",
									"host": [
										"{{get_weather_base_url}}"
									],
									"path": [
										"data",
										"{{version}}",
										"onecall"
									],
									"query": [
										{
											"key": "lat",
											"value": "{{latitude}}"
										},
										{
											"key": "lon",
											"value": "{{longitude}}"
										},
										{
											"key": "exclude",
											"value": "hourly,daily"
										},
										{
											"key": "appid",
											"value": "{{api_keys}}"
										},
										{
											"key": "units",
											"value": "{{temperature_unit}}"
										},
										{
											"key": "",
											"value": "",
											"disabled": true
										}
									]
								},
								"description": "Get a valid response when latitude value is missing"
							},
							"response": [
								{
									"name": "Get weather  via longitude&latitude missing latitude",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://api.openweathermap.org/data/2.5/onecall?lat=&lon=&exclude=hourly,daily&appid=1712846f0f291932f5e652846e7289d2&units=",
											"protocol": "https",
											"host": [
												"api",
												"openweathermap",
												"org"
											],
											"path": [
												"data",
												"2.5",
												"onecall"
											],
											"query": [
												{
													"key": "lat",
													"value": ""
												},
												{
													"key": "lon",
													"value": ""
												},
												{
													"key": "exclude",
													"value": "hourly,daily"
												},
												{
													"key": "appid",
													"value": "1712846f0f291932f5e652846e7289d2"
												},
												{
													"key": "units",
													"value": ""
												},
												{
													"key": "",
													"value": "",
													"disabled": true
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "openresty"
										},
										{
											"key": "Date",
											"value": "Mon, 01 May 2023 12:49:40 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "40"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "X-Cache-Key",
											"value": "/data/2.5/onecall?exclude=hourly,daily&lat=&lon=-133.47&units=1"
										},
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Access-Control-Allow-Credentials",
											"value": "true"
										},
										{
											"key": "Access-Control-Allow-Methods",
											"value": "GET, POST"
										}
									],
									"cookie": [],
									"body": "{\n    \"cod\": \"400\",\n    \"message\": \"wrong latitude\"\n}"
								}
							]
						},
						{
							"name": "Get weather  via longitude&latitude invalid appid",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var responseJsonData = JSON.parse(responseBody);",
											"pm.test(\"Get Weather endpoint with invalid appID returns expected http code\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"pm.test(\"Get Weather endpoint with invalid appID returns expected response body code\", () => {",
											" ",
											"  const expectedResponseBodyCode = 401;",
											"  const actualResponseBodyCode = responseJsonData.cod;",
											"  pm.expect(actualResponseBodyCode).to.eql(expectedResponseBodyCode, `Get weather endpoint with invalid appid value ,  expected response Body code ${expectedResponseBodyCode} but got :::> ${actualResponseBodyCode}`);",
											"  ",
											"});",
											"",
											"pm.test(\"Get Weather endpoint with invalid appID returns expected response body Message\", function () {",
											"  const expectedResponseBodyMessage = \"Invalid API key. Please see\";",
											"  const actualResponseBodyMessage = responseJsonData.message;",
											"  //asserting using part of the response message since the response message is big/huge",
											"  pm.expect(actualResponseBodyMessage).to.include(expectedResponseBodyMessage, `Get weather endpoint with invalid appid value ,  expected response Body Message ${expectedResponseBodyMessage} but got :::> ${actualResponseBodyMessage}`); ",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function generateRandomDoubleInRange(min, max) {",
											"    return (Math.random() * (max - min) + min).toFixed(2);",
											"}",
											"",
											"// on earth latitude range is in between -90 and 90 degrees ",
											"const latitude = generateRandomDoubleInRange(-90.00,90.00)",
											"",
											"",
											"// on earth  longitude range is in between -180 and 180 degrees ",
											"const longitude = generateRandomDoubleInRange(-180.00,180.00)",
											"const temperature=[\"standard\",\"metric\",\"imperial\"];",
											"const temp = Math.round(Math.random()*(temperature.length-1));",
											"pm.environment.set(\"temperature_unit\",temp);",
											"pm.environment.set(\"latitude\", latitude)",
											"pm.environment.set(\"longitude\", longitude)",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{get_weather_base_url}}/data/{{version}}/onecall?lat={{latitude}}&lon={{longitude}}&exclude=hourly,daily&appid={{api_keys}}_test&units={{temperature_unit}}",
									"host": [
										"{{get_weather_base_url}}"
									],
									"path": [
										"data",
										"{{version}}",
										"onecall"
									],
									"query": [
										{
											"key": "lat",
											"value": "{{latitude}}"
										},
										{
											"key": "lon",
											"value": "{{longitude}}"
										},
										{
											"key": "exclude",
											"value": "hourly,daily"
										},
										{
											"key": "appid",
											"value": "{{api_keys}}_test"
										},
										{
											"key": "units",
											"value": "{{temperature_unit}}"
										},
										{
											"key": "",
											"value": "",
											"disabled": true
										}
									]
								},
								"description": "Get a valid response when appid value is invalid"
							},
							"response": [
								{
									"name": "Get weather  via longitude&latitude invalid appid",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://api.openweathermap.org/data/2.5/onecall?lat=&lon=&exclude=hourly,daily&appid=1712846f0f291932f5e652846e7289d2_test&units=",
											"protocol": "https",
											"host": [
												"api",
												"openweathermap",
												"org"
											],
											"path": [
												"data",
												"2.5",
												"onecall"
											],
											"query": [
												{
													"key": "lat",
													"value": ""
												},
												{
													"key": "lon",
													"value": ""
												},
												{
													"key": "exclude",
													"value": "hourly,daily"
												},
												{
													"key": "appid",
													"value": "1712846f0f291932f5e652846e7289d2_test"
												},
												{
													"key": "units",
													"value": ""
												},
												{
													"key": "",
													"value": "",
													"disabled": true
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "openresty"
										},
										{
											"key": "Date",
											"value": "Mon, 01 May 2023 12:49:47 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "108"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "X-Cache-Key",
											"value": "/data/2.5/onecall?exclude=hourly,daily&lat=-73.3&lon=-148.68&units=2"
										},
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Access-Control-Allow-Credentials",
											"value": "true"
										},
										{
											"key": "Access-Control-Allow-Methods",
											"value": "GET, POST"
										}
									],
									"cookie": [],
									"body": "{\n    \"cod\": 401,\n    \"message\": \"Invalid API key. Please see https://openweathermap.org/faq#error401 for more info.\"\n}"
								}
							]
						},
						{
							"name": "Get weather  via longitude&latitude missing  null appid",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var responseJsonData = JSON.parse(responseBody);",
											"pm.test(\"Get Weather endpoint with null/empty appID returns expected http code\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"pm.test(\"Get Weather endpoint with null/empty appID returns expected response body code\", () => {",
											" ",
											"  const expectedResponseBodyCode = 401;",
											"  const actualResponseBodyCode = responseJsonData.cod;",
											"  pm.expect(actualResponseBodyCode).to.eql(expectedResponseBodyCode, `Get weather endpoint with null/empty appid value ,  expected response Body code ${expectedResponseBodyCode} but got :::> ${actualResponseBodyCode}`);",
											"  ",
											"});",
											"",
											"pm.test(\"Get Weather endpoint with null/invalid appID returns expected response body Message\", function () {",
											"  const expectedResponseBodyMessage = \"Invalid API key. Please see\";",
											"  const actualResponseBodyMessage = responseJsonData.message;",
											"  //asserting using part of the response message since the response message is big/huge",
											"  pm.expect(actualResponseBodyMessage).to.include(expectedResponseBodyMessage, `Get weather endpoint with missing/null appid value ,  expected response Body Message ${expectedResponseBodyMessage} but got :::> ${actualResponseBodyMessage}`); ",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function generateRandomDoubleInRange(min, max) {",
											"    return (Math.random() * (max - min) + min).toFixed(2);",
											"}",
											"",
											"// on earth latitude range is in between -90 and 90 degrees ",
											"const latitude = generateRandomDoubleInRange(-90.00,90.00)",
											"",
											"",
											"// on earth  longitude range is in between -180 and 180 degrees ",
											"const longitude = generateRandomDoubleInRange(-180.00,180.00)",
											"const temperature=[\"standard\",\"metric\",\"imperial\"];",
											"const temp = Math.round(Math.random()*(temperature.length-1));",
											"pm.environment.set(\"temperature_unit\",temp);",
											"pm.environment.set(\"latitude\", latitude)",
											"pm.environment.set(\"longitude\", longitude)",
											"pm.environment.set(\"api_key_null\", )",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{get_weather_base_url}}/data/{{version}}/onecall?lat={{latitude}}&lon={{longitude}}&exclude=hourly,daily&appid={{api_key_null}}&units={{temperature_unit}}",
									"host": [
										"{{get_weather_base_url}}"
									],
									"path": [
										"data",
										"{{version}}",
										"onecall"
									],
									"query": [
										{
											"key": "lat",
											"value": "{{latitude}}"
										},
										{
											"key": "lon",
											"value": "{{longitude}}"
										},
										{
											"key": "exclude",
											"value": "hourly,daily"
										},
										{
											"key": "appid",
											"value": "{{api_key_null}}"
										},
										{
											"key": "units",
											"value": "{{temperature_unit}}"
										},
										{
											"key": "",
											"value": "",
											"disabled": true
										}
									]
								},
								"description": "Get a valid response when appid value is missing"
							},
							"response": [
								{
									"name": "Get weather  via longitude&latitude missing  null appid",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://api.openweathermap.org/data/2.5/onecall?lat=&lon=&exclude=hourly,daily&appid=&units=",
											"protocol": "https",
											"host": [
												"api",
												"openweathermap",
												"org"
											],
											"path": [
												"data",
												"2.5",
												"onecall"
											],
											"query": [
												{
													"key": "lat",
													"value": ""
												},
												{
													"key": "lon",
													"value": ""
												},
												{
													"key": "exclude",
													"value": "hourly,daily"
												},
												{
													"key": "appid",
													"value": ""
												},
												{
													"key": "units",
													"value": ""
												},
												{
													"key": "",
													"value": "",
													"disabled": true
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "openresty"
										},
										{
											"key": "Date",
											"value": "Mon, 01 May 2023 12:49:53 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "108"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "X-Cache-Key",
											"value": "/data/2.5/onecall?exclude=hourly,daily&lat=-50.77&lon=-119.11&units=1"
										},
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Access-Control-Allow-Credentials",
											"value": "true"
										},
										{
											"key": "Access-Control-Allow-Methods",
											"value": "GET, POST"
										}
									],
									"cookie": [],
									"body": "{\n    \"cod\": 401,\n    \"message\": \"Invalid API key. Please see https://openweathermap.org/faq#error401 for more info.\"\n}"
								}
							]
						}
					],
					"description": "Used to get data based on a specific Longitude and latitude"
				},
				{
					"name": "GetWeather via country&city",
					"item": [
						{
							"name": "Get weather via country&city data success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"var responseJsonData = JSON.parse(responseBody);",
											"pm.test(\"Get Weather by country and city code endpoint returns the status code 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Get Weather by country and city code  API responds within the expected treshhold\", () => {",
											" ",
											"  const expectedTimeInMilliseconds = 5000;",
											"  pm.expect(pm.response.responseTime).to.be.lessThan(",
											"    expectedTimeInMilliseconds,",
											"    `The endpoint Get Weather by country and city code  did not respond within ${expectedTimeInMilliseconds} ms. Response came in ${pm.response.responseTime} ms`",
											"  );",
											"});",
											"",
											"",
											"pm.test(\"The endpoint Get Weather by country and city code response body containes key parameter values\", function () { ",
											"    //depending on the key params to be consumed, we need to assert that those key params are actually being returned by the endpoint. i picked some random params to assert here",
											"",
											"    pm.expect(pm.response.text()).to.include(\"coord\");",
											"    pm.expect(pm.response.text()).to.include(\"country\");",
											"    pm.expect(pm.response.text()).to.include(\"temp\");",
											"    pm.expect(pm.response.text()).to.include(\"humidity\");",
											"    pm.expect(pm.response.text()).to.include(\"weather\");",
											"    pm.expect(pm.response.text()).to.include(\"clouds\");",
											"    pm.expect(pm.response.text()).to.include(\"pressure\");",
											"    pm.expect(pm.response.text()).to.include(\"timezone\");",
											"});",
											"",
											"",
											"",
											"pm.test(\"The endpoint Get Weather by country and city code response body contains actual data of the city being requested\", function () { ",
											"    pm.expect(responseJsonData.name).to.eqls(pm.environment.get(\"city_name\"), `EXPECTED ${responseJsonData.name} to be equal to ${pm.environment.get(\"city_name\")}`);",
											"",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const city_names = [[\"Nairobi\",\"KE\"] , [\"London\" , \"uk\"] , [\"Paris\",\"FR\"]];",
											"const city_name_indexvalue = Math.round(Math.random()*(city_names.length-1));",
											"var city = city_names[city_name_indexvalue][0];",
											"var country_code = city_names[city_name_indexvalue][1];",
											"",
											"const temperature=[\"standard\",\"metric\",\"imperial\"];",
											"const temp = Math.round(Math.random()*(temperature.length-1));",
											"pm.environment.set(\"temperature_unit\",temp);",
											"pm.environment.set(\"city_name\", city)",
											"pm.environment.set(\"country_code\", country_code)",
											"",
											"//ensures that if required values are missing or null, the test is not executed.",
											"if (pm.variables.get(\"city_name\") == null) {",
											"    throw new Error(\"City name  is a required value\");",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{get_weather_base_url}}/data/{{version}}/weather?q={{city_name}},{{country_code}}&appid={{api_keys}}&units={{temperature_unit}}",
									"host": [
										"{{get_weather_base_url}}"
									],
									"path": [
										"data",
										"{{version}}",
										"weather"
									],
									"query": [
										{
											"key": "q",
											"value": "{{city_name}},{{country_code}}"
										},
										{
											"key": "appid",
											"value": "{{api_keys}}"
										},
										{
											"key": "units",
											"value": "{{temperature_unit}}"
										},
										{
											"key": "",
											"value": "",
											"disabled": true
										}
									]
								},
								"description": "Get a valid response when valid countrycode and valid cityname value sent"
							},
							"response": [
								{
									"name": "Get weather via country&city data success",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://api.openweathermap.org/data/2.5/weather?q=,&appid=1712846f0f291932f5e652846e7289d2&units=",
											"protocol": "https",
											"host": [
												"api",
												"openweathermap",
												"org"
											],
											"path": [
												"data",
												"2.5",
												"weather"
											],
											"query": [
												{
													"key": "q",
													"value": ","
												},
												{
													"key": "appid",
													"value": "1712846f0f291932f5e652846e7289d2"
												},
												{
													"key": "units",
													"value": ""
												},
												{
													"key": "",
													"value": "",
													"disabled": true
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "openresty"
										},
										{
											"key": "Date",
											"value": "Mon, 01 May 2023 12:50:01 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "505"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "X-Cache-Key",
											"value": "/data/2.5/weather?q=paris,fr&units=0"
										},
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Access-Control-Allow-Credentials",
											"value": "true"
										},
										{
											"key": "Access-Control-Allow-Methods",
											"value": "GET, POST"
										}
									],
									"cookie": [],
									"body": "{\n    \"coord\": {\n        \"lon\": 2.3488,\n        \"lat\": 48.8534\n    },\n    \"weather\": [\n        {\n            \"id\": 520,\n            \"main\": \"Rain\",\n            \"description\": \"light intensity shower rain\",\n            \"icon\": \"09d\"\n        }\n    ],\n    \"base\": \"stations\",\n    \"main\": {\n        \"temp\": 287.74,\n        \"feels_like\": 287.32,\n        \"temp_min\": 286.14,\n        \"temp_max\": 290.51,\n        \"pressure\": 1018,\n        \"humidity\": 79\n    },\n    \"visibility\": 10000,\n    \"wind\": {\n        \"speed\": 6.17,\n        \"deg\": 290\n    },\n    \"rain\": {\n        \"1h\": 2.37\n    },\n    \"clouds\": {\n        \"all\": 75\n    },\n    \"dt\": 1682945123,\n    \"sys\": {\n        \"type\": 2,\n        \"id\": 2012208,\n        \"country\": \"FR\",\n        \"sunrise\": 1682915448,\n        \"sunset\": 1682967870\n    },\n    \"timezone\": 7200,\n    \"id\": 2988507,\n    \"name\": \"Paris\",\n    \"cod\": 200\n}"
								}
							]
						},
						{
							"name": "Get weather via country&city missing city_name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var responseJsonData = JSON.parse(responseBody);",
											"pm.test(\"Get Weather by country and city code with missing/null city_name returns the status code 400\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"pm.test(\"Get Weather by country and city code with missing/null city_name returns expected response body code\", () => {",
											" ",
											"  const expectedResponseBodyCode = \"404\";",
											"  const actualResponseBodyCode = responseJsonData.cod;",
											"  pm.expect(actualResponseBodyCode).to.eql(expectedResponseBodyCode,`Get Weather by country and city code with missing/null city_name , We expected response Body Status code ${expectedResponseBodyCode} but got ${actualResponseBodyCode}`);",
											"  ",
											"});",
											"",
											"pm.test(\"Get Weather by country and city code with missing/null city_name returns expected  response body Message\", function () {",
											"  const expectedResponseBodyMessage = \"city not found\";",
											"  const actualResponseBodyMessage = responseJsonData.message;",
											"  //asserting using an exact values. For apis where the response message being displayed to customers is the response message from the response body, the response message should not changed regularly. Am working with that assumption here.",
											"  pm.expect(actualResponseBodyMessage).to.eql(expectedResponseBodyMessage, `Get Weather by country and city code with missing/null city_name ,  expected response Body Message ${expectedResponseBodyMessage} but got :::> ${actualResponseBodyMessage}`); ",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const city_names = [[\"Nairobi\",\"KE\"] , [\"London\" , \"uk\"] , [\"Paris\",\"FR\"]];",
											"const city_name_indexvalue = Math.round(Math.random()*(city_names.length-1));",
											"var country_code = city_names[city_name_indexvalue][1];",
											"const temperature=[\"standard\",\"metric\",\"imperial\"];",
											"const temp = Math.round(Math.random()*(temperature.length-1));",
											"pm.environment.set(\"temperature_unit\",temp);",
											"pm.environment.set(\"city_name\", )",
											"pm.environment.set(\"country_code\", country_code)",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{get_weather_base_url}}/data/{{version}}/weather?appid={{api_keys}}&q={{city_name}},{{country_code}}&units={{temperature_unit}}",
									"host": [
										"{{get_weather_base_url}}"
									],
									"path": [
										"data",
										"{{version}}",
										"weather"
									],
									"query": [
										{
											"key": "appid",
											"value": "{{api_keys}}"
										},
										{
											"key": "q",
											"value": "{{city_name}},{{country_code}}"
										},
										{
											"key": "units",
											"value": "{{temperature_unit}}"
										},
										{
											"key": "",
											"value": "",
											"disabled": true
										}
									]
								},
								"description": "Get a valid response when valid countrycode and cityname value is missing"
							},
							"response": [
								{
									"name": "Get weather via country&city missing city_name",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://api.openweathermap.org/data/2.5/weather?appid=1712846f0f291932f5e652846e7289d2&q=,&units=",
											"protocol": "https",
											"host": [
												"api",
												"openweathermap",
												"org"
											],
											"path": [
												"data",
												"2.5",
												"weather"
											],
											"query": [
												{
													"key": "appid",
													"value": "1712846f0f291932f5e652846e7289d2"
												},
												{
													"key": "q",
													"value": ","
												},
												{
													"key": "units",
													"value": ""
												},
												{
													"key": "",
													"value": "",
													"disabled": true
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "openresty"
										},
										{
											"key": "Date",
											"value": "Mon, 01 May 2023 12:50:09 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "40"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "X-Cache-Key",
											"value": "/data/2.5/weather?q=null,ke&units=1"
										},
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Access-Control-Allow-Credentials",
											"value": "true"
										},
										{
											"key": "Access-Control-Allow-Methods",
											"value": "GET, POST"
										}
									],
									"cookie": [],
									"body": "{\n    \"cod\": \"404\",\n    \"message\": \"city not found\"\n}"
								}
							]
						},
						{
							"name": "Get weather via country&city invalid city_name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var responseJsonData = JSON.parse(responseBody);",
											"pm.test(\"Get Weather by country and city code with missing/null city_name returns the status code 400\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"pm.test(\"Get Weather by country and city code with missing/null city_name returns expected response body code\", () => {",
											" ",
											"  const expectedResponseBodyCode = \"404\";",
											"  const actualResponseBodyCode = responseJsonData.cod;",
											"  pm.expect(actualResponseBodyCode).to.eql(expectedResponseBodyCode,`Get Weather by country and city code with missing/null city_name , We expected response Body Status code ${expectedResponseBodyCode} but got ${actualResponseBodyCode}`);",
											"  ",
											"});",
											"",
											"pm.test(\"Get Weather by country and city code with missing/null city_name returns expected  response body Message\", function () {",
											"  const expectedResponseBodyMessage = \"city not found\";",
											"  const actualResponseBodyMessage = responseJsonData.message;",
											"  pm.expect(actualResponseBodyMessage).to.eql(expectedResponseBodyMessage, `Get Weather by country and city code with missing/null city_name ,  expected response Body Message ${expectedResponseBodyMessage} but got :::> ${actualResponseBodyMessage}`); ",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const city_names = [[\"Nairobi\",\"KE\"] , [\"London\" , \"uk\"] , [\"Paris\",\"FR\"]];",
											"const city_name_indexvalue = Math.round(Math.random()*(city_names.length-1));",
											"var country_code = city_names[city_name_indexvalue][1];",
											"var city = city_names[city_name_indexvalue][0];",
											"const temperature=[\"standard\",\"metric\",\"imperial\"];",
											"const temp = Math.round(Math.random()*(temperature.length-1));",
											"pm.environment.set(\"temperature_unit\",temp);",
											"pm.environment.set(\"city_name\", city + \"test\" )",
											"pm.environment.set(\"country_code\", country_code)",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{get_weather_base_url}}/data/{{version}}/weather?appid={{api_keys}}&q={{city_name}},{{country_code}}&units={{temperature_unit}}",
									"host": [
										"{{get_weather_base_url}}"
									],
									"path": [
										"data",
										"{{version}}",
										"weather"
									],
									"query": [
										{
											"key": "appid",
											"value": "{{api_keys}}"
										},
										{
											"key": "q",
											"value": "{{city_name}},{{country_code}}"
										},
										{
											"key": "units",
											"value": "{{temperature_unit}}"
										},
										{
											"key": "",
											"value": "",
											"disabled": true
										}
									]
								},
								"description": "Get a valid response when valid countrycode and INVALID cityname value sent"
							},
							"response": [
								{
									"name": "Get weather via country&city invalid city_name",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://api.openweathermap.org/data/2.5/weather?appid=1712846f0f291932f5e652846e7289d2&q=,&units=",
											"protocol": "https",
											"host": [
												"api",
												"openweathermap",
												"org"
											],
											"path": [
												"data",
												"2.5",
												"weather"
											],
											"query": [
												{
													"key": "appid",
													"value": "1712846f0f291932f5e652846e7289d2"
												},
												{
													"key": "q",
													"value": ","
												},
												{
													"key": "units",
													"value": ""
												},
												{
													"key": "",
													"value": "",
													"disabled": true
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "openresty"
										},
										{
											"key": "Date",
											"value": "Mon, 01 May 2023 12:50:14 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "40"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "X-Cache-Key",
											"value": "/data/2.5/weather?q=paristest,fr&units=0"
										},
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Access-Control-Allow-Credentials",
											"value": "true"
										},
										{
											"key": "Access-Control-Allow-Methods",
											"value": "GET, POST"
										}
									],
									"cookie": [],
									"body": "{\n    \"cod\": \"404\",\n    \"message\": \"city not found\"\n}"
								}
							]
						},
						{
							"name": "Get weather via country&city missing country_code",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var responseJsonData = JSON.parse(responseBody);",
											"pm.test(\"Get Weather endpoint with missing required country_code value returns the status code 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Get weather endpoint with missing country_code value has all expected response body code\", () => {",
											" ",
											"  const expectedResponseBodyCode = 200;",
											"  const actualResponseBodyCode = responseJsonData.cod;",
											"  pm.expect(actualResponseBodyCode).to.eql(expectedResponseBodyCode, `Get weather endpoint with missing country_code value ,  expected response Body Code ${actualResponseBodyCode} but got :::> ${actualResponseBodyCode}`);",
											"  ",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const city_names = [[\"Nairobi\",\"KE\"] , [\"London\" , \"uk\"] , [\"Paris\",\"FR\"]];",
											"const city_name_indexvalue = Math.round(Math.random()*(city_names.length-1));",
											"var city = city_names[city_name_indexvalue][0];",
											"const temperature=[\"standard\",\"metric\",\"imperial\"];",
											"const temp = Math.round(Math.random()*(temperature.length-1));",
											"pm.environment.set(\"temperature_unit\",temp);",
											"pm.environment.set(\"city_name\", city )",
											"pm.environment.set(\"country_code\", )",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{get_weather_base_url}}/data/{{version}}/weather?appid={{api_keys}}&q={{city_name}},{{country_code}}&units={{temperature_unit}}",
									"host": [
										"{{get_weather_base_url}}"
									],
									"path": [
										"data",
										"{{version}}",
										"weather"
									],
									"query": [
										{
											"key": "appid",
											"value": "{{api_keys}}"
										},
										{
											"key": "q",
											"value": "{{city_name}},{{country_code}}"
										},
										{
											"key": "units",
											"value": "{{temperature_unit}}"
										},
										{
											"key": "",
											"value": "",
											"disabled": true
										}
									]
								},
								"description": "Get a valid response when countrycode IS missing"
							},
							"response": [
								{
									"name": "Get weather via country&city missing country_code",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://api.openweathermap.org/data/2.5/weather?appid=1712846f0f291932f5e652846e7289d2&q=,&units=",
											"protocol": "https",
											"host": [
												"api",
												"openweathermap",
												"org"
											],
											"path": [
												"data",
												"2.5",
												"weather"
											],
											"query": [
												{
													"key": "appid",
													"value": "1712846f0f291932f5e652846e7289d2"
												},
												{
													"key": "q",
													"value": ","
												},
												{
													"key": "units",
													"value": ""
												},
												{
													"key": "",
													"value": "",
													"disabled": true
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "openresty"
										},
										{
											"key": "Date",
											"value": "Mon, 01 May 2023 12:50:21 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "490"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "X-Cache-Key",
											"value": "/data/2.5/weather?q=nairobi,null&units=1"
										},
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Access-Control-Allow-Credentials",
											"value": "true"
										},
										{
											"key": "Access-Control-Allow-Methods",
											"value": "GET, POST"
										}
									],
									"cookie": [],
									"body": "{\n    \"coord\": {\n        \"lon\": 36.8167,\n        \"lat\": -1.2833\n    },\n    \"weather\": [\n        {\n            \"id\": 501,\n            \"main\": \"Rain\",\n            \"description\": \"moderate rain\",\n            \"icon\": \"10d\"\n        }\n    ],\n    \"base\": \"stations\",\n    \"main\": {\n        \"temp\": 293.96,\n        \"feels_like\": 293.98,\n        \"temp_min\": 292.58,\n        \"temp_max\": 294.08,\n        \"pressure\": 1021,\n        \"humidity\": 72\n    },\n    \"visibility\": 10000,\n    \"wind\": {\n        \"speed\": 5.14,\n        \"deg\": 60\n    },\n    \"rain\": {\n        \"1h\": 1.21\n    },\n    \"clouds\": {\n        \"all\": 75\n    },\n    \"dt\": 1682945148,\n    \"sys\": {\n        \"type\": 1,\n        \"id\": 2558,\n        \"country\": \"KE\",\n        \"sunrise\": 1682911663,\n        \"sunset\": 1682955111\n    },\n    \"timezone\": 10800,\n    \"id\": 184745,\n    \"name\": \"Nairobi\",\n    \"cod\": 200\n}"
								}
							]
						},
						{
							"name": "Get weather  via country&city invalid country_code",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var responseJsonData = JSON.parse(responseBody);",
											"pm.test(\"Get Weather endpoint with invalid country_code value returns the status code 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Get weather endpoint with invalid country_code  value has all expected response body code\", () => {",
											" ",
											"  const expectedResponseBodyCode = 200;",
											"  const actualResponseBodyCode = responseJsonData.cod;",
											"  pm.expect(actualResponseBodyCode).to.eql(expectedResponseBodyCode, `Get weather endpoint with invalid country_code ,  expected response Body Code ${actualResponseBodyCode} but got :::> ${actualResponseBodyCode}`);",
											"  ",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const city_names = [[\"Nairobi\",\"KE\"] , [\"London\" , \"uk\"] , [\"Paris\",\"FR\"]];",
											"const city_name_indexvalue = Math.round(Math.random()*(city_names.length-1));",
											"var city = city_names[city_name_indexvalue][0];",
											"var country_code = city_names[city_name_indexvalue][1];",
											"const temperature=[\"standard\",\"metric\",\"imperial\"];",
											"const temp = Math.round(Math.random()*(temperature.length-1));",
											"pm.environment.set(\"temperature_unit\",temp);",
											"pm.environment.set(\"city_name\", city )",
											"pm.environment.set(\"country_code\", country_code + \"_test333\"  )",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{get_weather_base_url}}/data/{{version}}/weather?appid={{api_keys}}&q={{city_name}},{{country_code}}&units={{temperature_unit}}",
									"host": [
										"{{get_weather_base_url}}"
									],
									"path": [
										"data",
										"{{version}}",
										"weather"
									],
									"query": [
										{
											"key": "appid",
											"value": "{{api_keys}}"
										},
										{
											"key": "q",
											"value": "{{city_name}},{{country_code}}"
										},
										{
											"key": "units",
											"value": "{{temperature_unit}}"
										},
										{
											"key": "",
											"value": "",
											"disabled": true
										}
									]
								},
								"description": "Get a valid response when invalid countrycode is sent"
							},
							"response": [
								{
									"name": "Get weather  via country&city invalid country_code",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://api.openweathermap.org/data/2.5/weather?appid=1712846f0f291932f5e652846e7289d2&q=,&units=",
											"protocol": "https",
											"host": [
												"api",
												"openweathermap",
												"org"
											],
											"path": [
												"data",
												"2.5",
												"weather"
											],
											"query": [
												{
													"key": "appid",
													"value": "1712846f0f291932f5e652846e7289d2"
												},
												{
													"key": "q",
													"value": ","
												},
												{
													"key": "units",
													"value": ""
												},
												{
													"key": "",
													"value": "",
													"disabled": true
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "openresty"
										},
										{
											"key": "Date",
											"value": "Mon, 01 May 2023 12:50:27 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "490"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "X-Cache-Key",
											"value": "/data/2.5/weather?q=nairobi,ke_test333&units=1"
										},
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Access-Control-Allow-Credentials",
											"value": "true"
										},
										{
											"key": "Access-Control-Allow-Methods",
											"value": "GET, POST"
										}
									],
									"cookie": [],
									"body": "{\n    \"coord\": {\n        \"lon\": 36.8167,\n        \"lat\": -1.2833\n    },\n    \"weather\": [\n        {\n            \"id\": 501,\n            \"main\": \"Rain\",\n            \"description\": \"moderate rain\",\n            \"icon\": \"10d\"\n        }\n    ],\n    \"base\": \"stations\",\n    \"main\": {\n        \"temp\": 293.96,\n        \"feels_like\": 293.98,\n        \"temp_min\": 292.58,\n        \"temp_max\": 294.08,\n        \"pressure\": 1021,\n        \"humidity\": 72\n    },\n    \"visibility\": 10000,\n    \"wind\": {\n        \"speed\": 5.14,\n        \"deg\": 60\n    },\n    \"rain\": {\n        \"1h\": 1.21\n    },\n    \"clouds\": {\n        \"all\": 75\n    },\n    \"dt\": 1682945427,\n    \"sys\": {\n        \"type\": 1,\n        \"id\": 2558,\n        \"country\": \"KE\",\n        \"sunrise\": 1682911663,\n        \"sunset\": 1682955111\n    },\n    \"timezone\": 10800,\n    \"id\": 184745,\n    \"name\": \"Nairobi\",\n    \"cod\": 200\n}"
								}
							]
						},
						{
							"name": "Get weather via country&city invalid appid",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var responseJsonData = JSON.parse(responseBody);",
											"pm.test(\"Get Weather endpoint using country code and city with invalid appID returns expected http code\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"pm.test(\"Get Weather endpoint country code and city with invalid appID returns expected response body code\", () => {",
											" ",
											"  const expectedResponseBodyCode = 401;",
											"  const actualResponseBodyCode = responseJsonData.cod;",
											"  pm.expect(actualResponseBodyCode).to.eql(expectedResponseBodyCode, `Get weather endpoint with invalid appid value ,  expected response Body Message ${expectedResponseBodyCode} but got :::> ${actualResponseBodyCode}`);",
											"  ",
											"});",
											"",
											"pm.test(\"Get Weather endpoint with invalid appID returns expected response body Message\", function () {",
											"  const expectedResponseBodyMessage = \"Invalid API key. Please see\";",
											"  const actualResponseBodyMessage = responseJsonData.message;",
											"  //asserting using part of the response message since the response message is big/huge",
											"  pm.expect(actualResponseBodyMessage).to.include(expectedResponseBodyMessage, `Get weather endpoint with invalid appid value ,  expected response Body Message ${expectedResponseBodyMessage} but got :::> ${actualResponseBodyMessage}`); ",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const city_names = [[\"Nairobi\",\"KE\"] , [\"London\" , \"uk\"] , [\"Paris\",\"FR\"]];",
											"const city_name_indexvalue = Math.round(Math.random()*(city_names.length-1));",
											"var city = city_names[city_name_indexvalue][0];",
											"var country_code = city_names[city_name_indexvalue][1];",
											"const temperature=[\"standard\",\"metric\",\"imperial\"];",
											"const temp = Math.round(Math.random()*(temperature.length-1));",
											"pm.environment.set(\"temperature_unit\",temp);",
											"pm.environment.set(\"city_name\", city)",
											"pm.environment.set(\"country_code\", country_code)",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{get_weather_base_url}}/data/{{version}}/weather?q={{city_name}},{{country_code}}&appid={{api_keys}}_test&units={{temperature_unit}}",
									"host": [
										"{{get_weather_base_url}}"
									],
									"path": [
										"data",
										"{{version}}",
										"weather"
									],
									"query": [
										{
											"key": "q",
											"value": "{{city_name}},{{country_code}}"
										},
										{
											"key": "appid",
											"value": "{{api_keys}}_test"
										},
										{
											"key": "units",
											"value": "{{temperature_unit}}"
										},
										{
											"key": "",
											"value": "",
											"disabled": true
										}
									]
								},
								"description": "Get a valid response when valid countrycode and invalid cityname value sent"
							},
							"response": [
								{
									"name": "Get weather via country&city invalid appid",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://api.openweathermap.org/data/2.5/weather?q=,&appid=1712846f0f291932f5e652846e7289d2_test&units=",
											"protocol": "https",
											"host": [
												"api",
												"openweathermap",
												"org"
											],
											"path": [
												"data",
												"2.5",
												"weather"
											],
											"query": [
												{
													"key": "q",
													"value": ","
												},
												{
													"key": "appid",
													"value": "1712846f0f291932f5e652846e7289d2_test"
												},
												{
													"key": "units",
													"value": ""
												},
												{
													"key": "",
													"value": "",
													"disabled": true
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "openresty"
										},
										{
											"key": "Date",
											"value": "Mon, 01 May 2023 12:50:33 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "108"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "X-Cache-Key",
											"value": "/data/2.5/weather?q=paris,fr&units=1"
										},
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Access-Control-Allow-Credentials",
											"value": "true"
										},
										{
											"key": "Access-Control-Allow-Methods",
											"value": "GET, POST"
										}
									],
									"cookie": [],
									"body": "{\n    \"cod\": 401,\n    \"message\": \"Invalid API key. Please see https://openweathermap.org/faq#error401 for more info.\"\n}"
								}
							]
						},
						{
							"name": "Get weather via country&city missing  null appid",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var responseJsonData = JSON.parse(responseBody);",
											"pm.test(\"Get Weather endpoint with null/empty appID returns expected http code\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"pm.test(\"Get Weather endpoint with null/empty appID returns expected response body code\", () => {",
											" ",
											"  const expectedResponseBodyCode = 401;",
											"  const actualResponseBodyCode = responseJsonData.cod;",
											"  pm.expect(actualResponseBodyCode).to.eql(expectedResponseBodyCode, `Get weather endpoint with null/empty appid value ,  expected response Body Message ${expectedResponseBodyCode} but got :::> ${actualResponseBodyCode}`);",
											"  ",
											"});",
											"",
											"pm.test(\"Get Weather endpoint with null/invalid appID returns expected response body Message\", function () {",
											"  const expectedResponseBodyMessage = \"Invalid API key. Please see\";",
											"  const actualResponseBodyMessage = responseJsonData.message;",
											"  //asserting using part of the response message since the response message is big/huge",
											"  pm.expect(actualResponseBodyMessage).to.include(expectedResponseBodyMessage, `Get weather endpoint with missing/null appid value ,  expected response Body Message ${expectedResponseBodyMessage} but got :::> ${actualResponseBodyMessage}`); ",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const city_names = [[\"Nairobi\",\"KE\"] , [\"London\" , \"uk\"] , [\"Paris\",\"FR\"]];",
											"const city_name_indexvalue = Math.round(Math.random()*(city_names.length-1));",
											"var city = city_names[city_name_indexvalue][0];",
											"var country_code = city_names[city_name_indexvalue][1];",
											"const temperature=[\"standard\",\"metric\",\"imperial\"];",
											"const temp = Math.round(Math.random()*(temperature.length-1));",
											"pm.environment.set(\"temperature_unit\",temp);",
											"pm.environment.set(\"city_name\", city)",
											"pm.environment.set(\"country_code\", country_code)",
											"pm.environment.set(\"api_keys_null\", )",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{get_weather_base_url}}/data/{{version}}/weather?q={{city_name}},{{country_code}}&appid={{api_keys_null}}&units={{temperature_unit}}",
									"host": [
										"{{get_weather_base_url}}"
									],
									"path": [
										"data",
										"{{version}}",
										"weather"
									],
									"query": [
										{
											"key": "q",
											"value": "{{city_name}},{{country_code}}"
										},
										{
											"key": "appid",
											"value": "{{api_keys_null}}"
										},
										{
											"key": "units",
											"value": "{{temperature_unit}}"
										},
										{
											"key": "",
											"value": "",
											"disabled": true
										}
									]
								},
								"description": "Get a valid response when valid countrycode and a missing cityname value sent"
							},
							"response": [
								{
									"name": "Get weather via country&city missing  null appid",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://api.openweathermap.org/data/2.5/weather?q=,&appid=&units=",
											"protocol": "https",
											"host": [
												"api",
												"openweathermap",
												"org"
											],
											"path": [
												"data",
												"2.5",
												"weather"
											],
											"query": [
												{
													"key": "q",
													"value": ","
												},
												{
													"key": "appid",
													"value": ""
												},
												{
													"key": "units",
													"value": ""
												},
												{
													"key": "",
													"value": "",
													"disabled": true
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "openresty"
										},
										{
											"key": "Date",
											"value": "Mon, 01 May 2023 12:50:40 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "108"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "X-Cache-Key",
											"value": "/data/2.5/weather?q=london,uk&units=0"
										},
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Access-Control-Allow-Credentials",
											"value": "true"
										},
										{
											"key": "Access-Control-Allow-Methods",
											"value": "GET, POST"
										}
									],
									"cookie": [],
									"body": "{\n    \"cod\": 401,\n    \"message\": \"Invalid API key. Please see https://openweathermap.org/faq#error401 for more info.\"\n}"
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "Get Forecast",
			"item": [
				{
					"name": "Get Forecast",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const city_names = [\"Nairobi\",\"London\",\"Paris\"];",
									"const city_name_indexvalue = Math.round(Math.random()*(city_names.length-1));",
									"var city = city_names[city_name_indexvalue];",
									"const temperature=[\"standard\",\"metric\",\"imperial\"];",
									"const temp = Math.round(Math.random()*(temperature.length-1));",
									"pm.environment.set(\"temperature_unit\",temp);",
									"pm.environment.set(\"city_name\", city)",
									"",
									"if (pm.variables.get(\"city_name\") == null) {",
									"    throw new Error(\"City name is required\");",
									"}",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseJsonData = JSON.parse(responseBody);",
									"pm.test(\"Get forecast 5days/3hours success endpoint returns the status code 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Get forecast 5days/3hours success endpoint  API responds within the expected responsetime Threshold\", () => {",
									" ",
									"  const expectedResponseTimeThresholdInMs = 5000;",
									"  pm.expect(pm.response.responseTime).to.be.lessThan(",
									"    expectedResponseTimeThresholdInMs,",
									"    `Get forecast 5days/3hours success endpoint did not respond within ${expectedResponseTimeThresholdInMs} ms. Response came in ${pm.response.responseTime} ms`",
									"  );",
									"});",
									"pm.test(\"Get forecast 5days/3hours success endpoint response Has expecxted params \", () => {",
									" ",
									"  const expectedResponseTimeThresholdInMs = 5000;",
									"  pm.expect(pm.response.responseTime).to.be.lessThan(",
									"    expectedResponseTimeThresholdInMs,",
									"    `Get forecast 5days/3hours success endpoint did not respond within ${expectedResponseTimeThresholdInMs} ms. Response came in ${pm.response.responseTime} ms`",
									"  );",
									"});",
									"",
									"",
									"pm.test(\"Get forecast 5days/3hours success endpoint  response body containes key parameter values\", function () { ",
									"    //depending on the key params to be consumed, we need to assert that those key params are actually being returned by the endpoint. i picked some random params to assert here",
									"    pm.expect(pm.response.text()).to.include(\"temp\");",
									"    pm.expect(pm.response.text()).to.include(\"humidity\");",
									"    pm.expect(pm.response.text()).to.include(\"weather\");",
									"    pm.expect(pm.response.text()).to.include(\"clouds\");",
									"    pm.expect(pm.response.text()).to.include(\"pressure\");",
									"    pm.expect(pm.response.text()).to.include(\"timezone\");",
									"});",
									"",
									"pm.test(\"Get forecast 5days/3hours success endpoint response body contains actual data of the city being requested\", function () { ",
									"    pm.expect(responseJsonData.city.name).to.eqls(pm.environment.get(\"city_name\"), `EXPECTED ${responseJsonData.city.name} to be equal to ${pm.environment.get(\"city_name\")}`);",
									"    ",
									"",
									"});",
									"// 5 days ",
									"//each 24 hours",
									"//total hours 120",
									"// 120 / 3 = 40 records",
									"pm.test(\"Get forecast 5days/3hours success responds with an exact 40 records of data\", function () { ",
									"    //checks if cnt is equal to 40. on the docs, cnt means A number of timestamps, which will be returned in the API response. ",
									"    pm.expect(responseJsonData.cnt).to.eqls(40, `EXPECTED ${responseJsonData.cnt} to be equal to 40 records of data`);",
									"",
									"    //goes further and checks if the actual records on list is equal to 40 since we are expecting a record of 40 data witha difference of 3 hours.",
									"    pm.expect(responseJsonData.list.length).to.eqls(40, `EXPECTED ${responseJsonData.list.length} to be equal to 40 records of data`);",
									"    ",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{get_weather_base_url}}/data/{{version}}/forecast?q={{city_name}}&appid={{api_keys}}&units={{temperature_unit}}",
							"host": [
								"{{get_weather_base_url}}"
							],
							"path": [
								"data",
								"{{version}}",
								"forecast"
							],
							"query": [
								{
									"key": "q",
									"value": "{{city_name}}"
								},
								{
									"key": "appid",
									"value": "{{api_keys}}"
								},
								{
									"key": "units",
									"value": "{{temperature_unit}}"
								}
							]
						},
						"description": "Get a valid response when valid values are sent on forecast"
					},
					"response": [
						{
							"name": "Get Forecast",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://api.openweathermap.org/data/2.5/forecast?q=&appid=1712846f0f291932f5e652846e7289d2&units=",
									"protocol": "https",
									"host": [
										"api",
										"openweathermap",
										"org"
									],
									"path": [
										"data",
										"2.5",
										"forecast"
									],
									"query": [
										{
											"key": "q",
											"value": ""
										},
										{
											"key": "appid",
											"value": "1712846f0f291932f5e652846e7289d2"
										},
										{
											"key": "units",
											"value": ""
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "openresty"
								},
								{
									"key": "Date",
									"value": "Mon, 01 May 2023 12:50:47 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "16244"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "X-Cache-Key",
									"value": "/data/2.5/forecast?q=london&units=1"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Access-Control-Allow-Methods",
									"value": "GET, POST"
								}
							],
							"cookie": [],
							"body": "{\n    \"cod\": \"200\",\n    \"message\": 0,\n    \"cnt\": 40,\n    \"list\": [\n        {\n            \"dt\": 1682953200,\n            \"main\": {\n                \"temp\": 289.52,\n                \"feels_like\": 288.88,\n                \"temp_min\": 289.27,\n                \"temp_max\": 289.52,\n                \"pressure\": 1018,\n                \"sea_level\": 1018,\n                \"grnd_level\": 1014,\n                \"humidity\": 64,\n                \"temp_kf\": 0.25\n            },\n            \"weather\": [\n                {\n                    \"id\": 500,\n                    \"main\": \"Rain\",\n                    \"description\": \"light rain\",\n                    \"icon\": \"10d\"\n                }\n            ],\n            \"clouds\": {\n                \"all\": 56\n            },\n            \"wind\": {\n                \"speed\": 4.55,\n                \"deg\": 330,\n                \"gust\": 6.73\n            },\n            \"visibility\": 10000,\n            \"pop\": 1,\n            \"rain\": {\n                \"3h\": 0.57\n            },\n            \"sys\": {\n                \"pod\": \"d\"\n            },\n            \"dt_txt\": \"2023-05-01 15:00:00\"\n        },\n        {\n            \"dt\": 1682964000,\n            \"main\": {\n                \"temp\": 288.75,\n                \"feels_like\": 288.14,\n                \"temp_min\": 288.3,\n                \"temp_max\": 288.75,\n                \"pressure\": 1018,\n                \"sea_level\": 1018,\n                \"grnd_level\": 1015,\n                \"humidity\": 68,\n                \"temp_kf\": 0.45\n            },\n            \"weather\": [\n                {\n                    \"id\": 500,\n                    \"main\": \"Rain\",\n                    \"description\": \"light rain\",\n                    \"icon\": \"10d\"\n                }\n            ],\n            \"clouds\": {\n                \"all\": 63\n            },\n            \"wind\": {\n                \"speed\": 3.55,\n                \"deg\": 341,\n                \"gust\": 6.6\n            },\n            \"visibility\": 10000,\n            \"pop\": 1,\n            \"rain\": {\n                \"3h\": 0.14\n            },\n            \"sys\": {\n                \"pod\": \"d\"\n            },\n            \"dt_txt\": \"2023-05-01 18:00:00\"\n        },\n        {\n            \"dt\": 1682974800,\n            \"main\": {\n                \"temp\": 284.81,\n                \"feels_like\": 284.36,\n                \"temp_min\": 284.81,\n                \"temp_max\": 284.81,\n                \"pressure\": 1021,\n                \"sea_level\": 1021,\n                \"grnd_level\": 1018,\n                \"humidity\": 89,\n                \"temp_kf\": 0\n            },\n            \"weather\": [\n                {\n                    \"id\": 500,\n                    \"main\": \"Rain\",\n                    \"description\": \"light rain\",\n                    \"icon\": \"10n\"\n                }\n            ],\n            \"clouds\": {\n                \"all\": 5\n            },\n            \"wind\": {\n                \"speed\": 2.06,\n                \"deg\": 329,\n                \"gust\": 6.19\n            },\n            \"visibility\": 10000,\n            \"pop\": 0.24,\n            \"rain\": {\n                \"3h\": 0.12\n            },\n            \"sys\": {\n                \"pod\": \"n\"\n            },\n            \"dt_txt\": \"2023-05-01 21:00:00\"\n        },\n        {\n            \"dt\": 1682985600,\n            \"main\": {\n                \"temp\": 282.36,\n                \"feels_like\": 280.59,\n                \"temp_min\": 282.36,\n                \"temp_max\": 282.36,\n                \"pressure\": 1023,\n                \"sea_level\": 1023,\n                \"grnd_level\": 1020,\n                \"humidity\": 89,\n                \"temp_kf\": 0\n            },\n            \"weather\": [\n                {\n                    \"id\": 801,\n                    \"main\": \"Clouds\",\n                    \"description\": \"few clouds\",\n                    \"icon\": \"02n\"\n                }\n            ],\n            \"clouds\": {\n                \"all\": 24\n            },\n            \"wind\": {\n                \"speed\": 3.21,\n                \"deg\": 28,\n                \"gust\": 7.39\n            },\n            \"visibility\": 10000,\n            \"pop\": 0,\n            \"sys\": {\n                \"pod\": \"n\"\n            },\n            \"dt_txt\": \"2023-05-02 00:00:00\"\n        },\n        {\n            \"dt\": 1682996400,\n            \"main\": {\n                \"temp\": 281.27,\n                \"feels_like\": 279.57,\n                \"temp_min\": 281.27,\n                \"temp_max\": 281.27,\n                \"pressure\": 1024,\n                \"sea_level\": 1024,\n                \"grnd_level\": 1021,\n                \"humidity\": 88,\n                \"temp_kf\": 0\n            },\n            \"weather\": [\n                {\n                    \"id\": 804,\n                    \"main\": \"Clouds\",\n                    \"description\": \"overcast clouds\",\n                    \"icon\": \"04n\"\n                }\n            ],\n            \"clouds\": {\n                \"all\": 92\n            },\n            \"wind\": {\n                \"speed\": 2.75,\n                \"deg\": 28,\n                \"gust\": 6.69\n            },\n            \"visibility\": 10000,\n            \"pop\": 0,\n            \"sys\": {\n                \"pod\": \"n\"\n            },\n            \"dt_txt\": \"2023-05-02 03:00:00\"\n        },\n        {\n            \"dt\": 1683007200,\n            \"main\": {\n                \"temp\": 281.62,\n                \"feels_like\": 279.78,\n                \"temp_min\": 281.62,\n                \"temp_max\": 281.62,\n                \"pressure\": 1026,\n                \"sea_level\": 1026,\n                \"grnd_level\": 1023,\n                \"humidity\": 80,\n                \"temp_kf\": 0\n            },\n            \"weather\": [\n                {\n                    \"id\": 804,\n                    \"main\": \"Clouds\",\n                    \"description\": \"overcast clouds\",\n                    \"icon\": \"04d\"\n                }\n            ],\n            \"clouds\": {\n                \"all\": 96\n            },\n            \"wind\": {\n                \"speed\": 3.07,\n                \"deg\": 46,\n                \"gust\": 5.29\n            },\n            \"visibility\": 10000,\n            \"pop\": 0,\n            \"sys\": {\n                \"pod\": \"d\"\n            },\n            \"dt_txt\": \"2023-05-02 06:00:00\"\n        },\n        {\n            \"dt\": 1683018000,\n            \"main\": {\n                \"temp\": 284.47,\n                \"feels_like\": 283.28,\n                \"temp_min\": 284.47,\n                \"temp_max\": 284.47,\n                \"pressure\": 1027,\n                \"sea_level\": 1027,\n                \"grnd_level\": 1024,\n                \"humidity\": 62,\n                \"temp_kf\": 0\n            },\n            \"weather\": [\n                {\n                    \"id\": 803,\n                    \"main\": \"Clouds\",\n                    \"description\": \"broken clouds\",\n                    \"icon\": \"04d\"\n                }\n            ],\n            \"clouds\": {\n                \"all\": 59\n            },\n            \"wind\": {\n                \"speed\": 3.45,\n                \"deg\": 61,\n                \"gust\": 3.91\n            },\n            \"visibility\": 10000,\n            \"pop\": 0,\n            \"sys\": {\n                \"pod\": \"d\"\n            },\n            \"dt_txt\": \"2023-05-02 09:00:00\"\n        },\n        {\n            \"dt\": 1683028800,\n            \"main\": {\n                \"temp\": 286.53,\n                \"feels_like\": 285.39,\n                \"temp_min\": 286.53,\n                \"temp_max\": 286.53,\n                \"pressure\": 1028,\n                \"sea_level\": 1028,\n                \"grnd_level\": 1024,\n                \"humidity\": 56,\n                \"temp_kf\": 0\n            },\n            \"weather\": [\n                {\n                    \"id\": 803,\n                    \"main\": \"Clouds\",\n                    \"description\": \"broken clouds\",\n                    \"icon\": \"04d\"\n                }\n            ],\n            \"clouds\": {\n                \"all\": 65\n            },\n            \"wind\": {\n                \"speed\": 2.88,\n                \"deg\": 83,\n                \"gust\": 2.42\n            },\n            \"visibility\": 10000,\n            \"pop\": 0,\n            \"sys\": {\n                \"pod\": \"d\"\n            },\n            \"dt_txt\": \"2023-05-02 12:00:00\"\n        },\n        {\n            \"dt\": 1683039600,\n            \"main\": {\n                \"temp\": 285.32,\n                \"feels_like\": 284.21,\n                \"temp_min\": 285.32,\n                \"temp_max\": 285.32,\n                \"pressure\": 1029,\n                \"sea_level\": 1029,\n                \"grnd_level\": 1025,\n                \"humidity\": 62,\n                \"temp_kf\": 0\n            },\n            \"weather\": [\n                {\n                    \"id\": 804,\n                    \"main\": \"Clouds\",\n                    \"description\": \"overcast clouds\",\n                    \"icon\": \"04d\"\n                }\n            ],\n            \"clouds\": {\n                \"all\": 100\n            },\n            \"wind\": {\n                \"speed\": 3.22,\n                \"deg\": 80,\n                \"gust\": 2.73\n            },\n            \"visibility\": 10000,\n            \"pop\": 0,\n            \"sys\": {\n                \"pod\": \"d\"\n            },\n            \"dt_txt\": \"2023-05-02 15:00:00\"\n        },\n        {\n            \"dt\": 1683050400,\n            \"main\": {\n                \"temp\": 283.82,\n                \"feels_like\": 282.72,\n                \"temp_min\": 283.82,\n                \"temp_max\": 283.82,\n                \"pressure\": 1029,\n                \"sea_level\": 1029,\n                \"grnd_level\": 1025,\n                \"humidity\": 68,\n                \"temp_kf\": 0\n            },\n            \"weather\": [\n                {\n                    \"id\": 804,\n                    \"main\": \"Clouds\",\n                    \"description\": \"overcast clouds\",\n                    \"icon\": \"04d\"\n                }\n            ],\n            \"clouds\": {\n                \"all\": 100\n            },\n            \"wind\": {\n                \"speed\": 3.24,\n                \"deg\": 92,\n                \"gust\": 4.2\n            },\n            \"visibility\": 10000,\n            \"pop\": 0,\n            \"sys\": {\n                \"pod\": \"d\"\n            },\n            \"dt_txt\": \"2023-05-02 18:00:00\"\n        },\n        {\n            \"dt\": 1683061200,\n            \"main\": {\n                \"temp\": 280.76,\n                \"feels_like\": 278.86,\n                \"temp_min\": 280.76,\n                \"temp_max\": 280.76,\n                \"pressure\": 1030,\n                \"sea_level\": 1030,\n                \"grnd_level\": 1027,\n                \"humidity\": 73,\n                \"temp_kf\": 0\n            },\n            \"weather\": [\n                {\n                    \"id\": 803,\n                    \"main\": \"Clouds\",\n                    \"description\": \"broken clouds\",\n                    \"icon\": \"04n\"\n                }\n            ],\n            \"clouds\": {\n                \"all\": 83\n            },\n            \"wind\": {\n                \"speed\": 2.9,\n                \"deg\": 97,\n                \"gust\": 6.97\n            },\n            \"visibility\": 10000,\n            \"pop\": 0,\n            \"sys\": {\n                \"pod\": \"n\"\n            },\n            \"dt_txt\": \"2023-05-02 21:00:00\"\n        },\n        {\n            \"dt\": 1683072000,\n            \"main\": {\n                \"temp\": 279.79,\n                \"feels_like\": 278.06,\n                \"temp_min\": 279.79,\n                \"temp_max\": 279.79,\n                \"pressure\": 1030,\n                \"sea_level\": 1030,\n                \"grnd_level\": 1027,\n                \"humidity\": 76,\n                \"temp_kf\": 0\n            },\n            \"weather\": [\n                {\n                    \"id\": 803,\n                    \"main\": \"Clouds\",\n                    \"description\": \"broken clouds\",\n                    \"icon\": \"04n\"\n                }\n            ],\n            \"clouds\": {\n                \"all\": 67\n            },\n            \"wind\": {\n                \"speed\": 2.42,\n                \"deg\": 74,\n                \"gust\": 7.49\n            },\n            \"visibility\": 10000,\n            \"pop\": 0,\n            \"sys\": {\n                \"pod\": \"n\"\n            },\n            \"dt_txt\": \"2023-05-03 00:00:00\"\n        },\n        {\n            \"dt\": 1683082800,\n            \"main\": {\n                \"temp\": 278.53,\n                \"feels_like\": 276.64,\n                \"temp_min\": 278.53,\n                \"temp_max\": 278.53,\n                \"pressure\": 1029,\n                \"sea_level\": 1029,\n                \"grnd_level\": 1026,\n                \"humidity\": 80,\n                \"temp_kf\": 0\n            },\n            \"weather\": [\n                {\n                    \"id\": 804,\n                    \"main\": \"Clouds\",\n                    \"description\": \"overcast clouds\",\n                    \"icon\": \"04n\"\n                }\n            ],\n            \"clouds\": {\n                \"all\": 91\n            },\n            \"wind\": {\n                \"speed\": 2.34,\n                \"deg\": 74,\n                \"gust\": 8.29\n            },\n            \"visibility\": 10000,\n            \"pop\": 0,\n            \"sys\": {\n                \"pod\": \"n\"\n            },\n            \"dt_txt\": \"2023-05-03 03:00:00\"\n        },\n        {\n            \"dt\": 1683093600,\n            \"main\": {\n                \"temp\": 279.41,\n                \"feels_like\": 277.44,\n                \"temp_min\": 279.41,\n                \"temp_max\": 279.41,\n                \"pressure\": 1029,\n                \"sea_level\": 1029,\n                \"grnd_level\": 1026,\n                \"humidity\": 79,\n                \"temp_kf\": 0\n            },\n            \"weather\": [\n                {\n                    \"id\": 804,\n                    \"main\": \"Clouds\",\n                    \"description\": \"overcast clouds\",\n                    \"icon\": \"04d\"\n                }\n            ],\n            \"clouds\": {\n                \"all\": 91\n            },\n            \"wind\": {\n                \"speed\": 2.63,\n                \"deg\": 70,\n                \"gust\": 8.29\n            },\n            \"visibility\": 10000,\n            \"pop\": 0,\n            \"sys\": {\n                \"pod\": \"d\"\n            },\n            \"dt_txt\": \"2023-05-03 06:00:00\"\n        },\n        {\n            \"dt\": 1683104400,\n            \"main\": {\n                \"temp\": 284.32,\n                \"feels_like\": 283.03,\n                \"temp_min\": 284.32,\n                \"temp_max\": 284.32,\n                \"pressure\": 1028,\n                \"sea_level\": 1028,\n                \"grnd_level\": 1025,\n                \"humidity\": 59,\n                \"temp_kf\": 0\n            },\n            \"weather\": [\n                {\n                    \"id\": 803,\n                    \"main\": \"Clouds\",\n                    \"description\": \"broken clouds\",\n                    \"icon\": \"04d\"\n                }\n            ],\n            \"clouds\": {\n                \"all\": 74\n            },\n            \"wind\": {\n                \"speed\": 4.65,\n                \"deg\": 100,\n                \"gust\": 6.18\n            },\n            \"visibility\": 10000,\n            \"pop\": 0,\n            \"sys\": {\n                \"pod\": \"d\"\n            },\n            \"dt_txt\": \"2023-05-03 09:00:00\"\n        },\n        {\n            \"dt\": 1683115200,\n            \"main\": {\n                \"temp\": 286.34,\n                \"feels_like\": 284.99,\n                \"temp_min\": 286.34,\n                \"temp_max\": 286.34,\n                \"pressure\": 1027,\n                \"sea_level\": 1027,\n                \"grnd_level\": 1024,\n                \"humidity\": 49,\n                \"temp_kf\": 0\n            },\n            \"weather\": [\n                {\n                    \"id\": 803,\n                    \"main\": \"Clouds\",\n                    \"description\": \"broken clouds\",\n                    \"icon\": \"04d\"\n                }\n            ],\n            \"clouds\": {\n                \"all\": 75\n            },\n            \"wind\": {\n                \"speed\": 5.53,\n                \"deg\": 88,\n                \"gust\": 6.81\n            },\n            \"visibility\": 10000,\n            \"pop\": 0,\n            \"sys\": {\n                \"pod\": \"d\"\n            },\n            \"dt_txt\": \"2023-05-03 12:00:00\"\n        },\n        {\n            \"dt\": 1683126000,\n            \"main\": {\n                \"temp\": 285.63,\n                \"feels_like\": 284.24,\n                \"temp_min\": 285.63,\n                \"temp_max\": 285.63,\n                \"pressure\": 1026,\n                \"sea_level\": 1026,\n                \"grnd_level\": 1023,\n                \"humidity\": 50,\n                \"temp_kf\": 0\n            },\n            \"weather\": [\n                {\n                    \"id\": 803,\n                    \"main\": \"Clouds\",\n                    \"description\": \"broken clouds\",\n                    \"icon\": \"04d\"\n                }\n            ],\n            \"clouds\": {\n                \"all\": 82\n            },\n            \"wind\": {\n                \"speed\": 5.84,\n                \"deg\": 89,\n                \"gust\": 7.63\n            },\n            \"visibility\": 10000,\n            \"pop\": 0,\n            \"sys\": {\n                \"pod\": \"d\"\n            },\n            \"dt_txt\": \"2023-05-03 15:00:00\"\n        },\n        {\n            \"dt\": 1683136800,\n            \"main\": {\n                \"temp\": 283.25,\n                \"feels_like\": 282.04,\n                \"temp_min\": 283.25,\n                \"temp_max\": 283.25,\n                \"pressure\": 1025,\n                \"sea_level\": 1025,\n                \"grnd_level\": 1022,\n                \"humidity\": 66,\n                \"temp_kf\": 0\n            },\n            \"weather\": [\n                {\n                    \"id\": 804,\n                    \"main\": \"Clouds\",\n                    \"description\": \"overcast clouds\",\n                    \"icon\": \"04d\"\n                }\n            ],\n            \"clouds\": {\n                \"all\": 91\n            },\n            \"wind\": {\n                \"speed\": 4.8,\n                \"deg\": 82,\n                \"gust\": 9.77\n            },\n            \"visibility\": 10000,\n            \"pop\": 0,\n            \"sys\": {\n                \"pod\": \"d\"\n            },\n            \"dt_txt\": \"2023-05-03 18:00:00\"\n        },\n        {\n            \"dt\": 1683147600,\n            \"main\": {\n                \"temp\": 281.35,\n                \"feels_like\": 278.66,\n                \"temp_min\": 281.35,\n                \"temp_max\": 281.35,\n                \"pressure\": 1025,\n                \"sea_level\": 1025,\n                \"grnd_level\": 1021,\n                \"humidity\": 80,\n                \"temp_kf\": 0\n            },\n            \"weather\": [\n                {\n                    \"id\": 804,\n                    \"main\": \"Clouds\",\n                    \"description\": \"overcast clouds\",\n                    \"icon\": \"04n\"\n                }\n            ],\n            \"clouds\": {\n                \"all\": 100\n            },\n            \"wind\": {\n                \"speed\": 4.59,\n                \"deg\": 75,\n                \"gust\": 13.04\n            },\n            \"visibility\": 10000,\n            \"pop\": 0,\n            \"sys\": {\n                \"pod\": \"n\"\n            },\n            \"dt_txt\": \"2023-05-03 21:00:00\"\n        },\n        {\n            \"dt\": 1683158400,\n            \"main\": {\n                \"temp\": 281.96,\n                \"feels_like\": 279.68,\n                \"temp_min\": 281.96,\n                \"temp_max\": 281.96,\n                \"pressure\": 1023,\n                \"sea_level\": 1023,\n                \"grnd_level\": 1019,\n                \"humidity\": 86,\n                \"temp_kf\": 0\n            },\n            \"weather\": [\n                {\n                    \"id\": 804,\n                    \"main\": \"Clouds\",\n                    \"description\": \"overcast clouds\",\n                    \"icon\": \"04n\"\n                }\n            ],\n            \"clouds\": {\n                \"all\": 100\n            },\n            \"wind\": {\n                \"speed\": 4.01,\n                \"deg\": 77,\n                \"gust\": 12.53\n            },\n            \"visibility\": 10000,\n            \"pop\": 0,\n            \"sys\": {\n                \"pod\": \"n\"\n            },\n            \"dt_txt\": \"2023-05-04 00:00:00\"\n        },\n        {\n            \"dt\": 1683169200,\n            \"main\": {\n                \"temp\": 281.99,\n                \"feels_like\": 279.48,\n                \"temp_min\": 281.99,\n                \"temp_max\": 281.99,\n                \"pressure\": 1021,\n                \"sea_level\": 1021,\n                \"grnd_level\": 1018,\n                \"humidity\": 84,\n                \"temp_kf\": 0\n            },\n            \"weather\": [\n                {\n                    \"id\": 804,\n                    \"main\": \"Clouds\",\n                    \"description\": \"overcast clouds\",\n                    \"icon\": \"04n\"\n                }\n            ],\n            \"clouds\": {\n                \"all\": 100\n            },\n            \"wind\": {\n                \"speed\": 4.54,\n                \"deg\": 85,\n                \"gust\": 12.29\n            },\n            \"visibility\": 10000,\n            \"pop\": 0,\n            \"sys\": {\n                \"pod\": \"n\"\n            },\n            \"dt_txt\": \"2023-05-04 03:00:00\"\n        },\n        {\n            \"dt\": 1683180000,\n            \"main\": {\n                \"temp\": 282.68,\n                \"feels_like\": 280.19,\n                \"temp_min\": 282.68,\n                \"temp_max\": 282.68,\n                \"pressure\": 1020,\n                \"sea_level\": 1020,\n                \"grnd_level\": 1017,\n                \"humidity\": 79,\n                \"temp_kf\": 0\n            },\n            \"weather\": [\n                {\n                    \"id\": 804,\n                    \"main\": \"Clouds\",\n                    \"description\": \"overcast clouds\",\n                    \"icon\": \"04d\"\n                }\n            ],\n            \"clouds\": {\n                \"all\": 98\n            },\n            \"wind\": {\n                \"speed\": 4.9,\n                \"deg\": 87,\n                \"gust\": 13.48\n            },\n            \"visibility\": 10000,\n            \"pop\": 0,\n            \"sys\": {\n                \"pod\": \"d\"\n            },\n            \"dt_txt\": \"2023-05-04 06:00:00\"\n        },\n        {\n            \"dt\": 1683190800,\n            \"main\": {\n                \"temp\": 287.32,\n                \"feels_like\": 286.28,\n                \"temp_min\": 287.32,\n                \"temp_max\": 287.32,\n                \"pressure\": 1018,\n                \"sea_level\": 1018,\n                \"grnd_level\": 1015,\n                \"humidity\": 57,\n                \"temp_kf\": 0\n            },\n            \"weather\": [\n                {\n                    \"id\": 804,\n                    \"main\": \"Clouds\",\n                    \"description\": \"overcast clouds\",\n                    \"icon\": \"04d\"\n                }\n            ],\n            \"clouds\": {\n                \"all\": 100\n            },\n            \"wind\": {\n                \"speed\": 5.86,\n                \"deg\": 101,\n                \"gust\": 11.2\n            },\n            \"visibility\": 10000,\n            \"pop\": 0,\n            \"sys\": {\n                \"pod\": \"d\"\n            },\n            \"dt_txt\": \"2023-05-04 09:00:00\"\n        },\n        {\n            \"dt\": 1683201600,\n            \"main\": {\n                \"temp\": 290.78,\n                \"feels_like\": 289.85,\n                \"temp_min\": 290.78,\n                \"temp_max\": 290.78,\n                \"pressure\": 1017,\n                \"sea_level\": 1017,\n                \"grnd_level\": 1014,\n                \"humidity\": 48,\n                \"temp_kf\": 0\n            },\n            \"weather\": [\n                {\n                    \"id\": 804,\n                    \"main\": \"Clouds\",\n                    \"description\": \"overcast clouds\",\n                    \"icon\": \"04d\"\n                }\n            ],\n            \"clouds\": {\n                \"all\": 99\n            },\n            \"wind\": {\n                \"speed\": 5.84,\n                \"deg\": 109,\n                \"gust\": 8.41\n            },\n            \"visibility\": 10000,\n            \"pop\": 0,\n            \"sys\": {\n                \"pod\": \"d\"\n            },\n            \"dt_txt\": \"2023-05-04 12:00:00\"\n        },\n        {\n            \"dt\": 1683212400,\n            \"main\": {\n                \"temp\": 290.26,\n                \"feels_like\": 289.51,\n                \"temp_min\": 290.26,\n                \"temp_max\": 290.26,\n                \"pressure\": 1016,\n                \"sea_level\": 1016,\n                \"grnd_level\": 1013,\n                \"humidity\": 57,\n                \"temp_kf\": 0\n            },\n            \"weather\": [\n                {\n                    \"id\": 804,\n                    \"main\": \"Clouds\",\n                    \"description\": \"overcast clouds\",\n                    \"icon\": \"04d\"\n                }\n            ],\n            \"clouds\": {\n                \"all\": 100\n            },\n            \"wind\": {\n                \"speed\": 4.75,\n                \"deg\": 125,\n                \"gust\": 7.56\n            },\n            \"visibility\": 10000,\n            \"pop\": 0,\n            \"sys\": {\n                \"pod\": \"d\"\n            },\n            \"dt_txt\": \"2023-05-04 15:00:00\"\n        },\n        {\n            \"dt\": 1683223200,\n            \"main\": {\n                \"temp\": 289.93,\n                \"feels_like\": 289.41,\n                \"temp_min\": 289.93,\n                \"temp_max\": 289.93,\n                \"pressure\": 1015,\n                \"sea_level\": 1015,\n                \"grnd_level\": 1012,\n                \"humidity\": 67,\n                \"temp_kf\": 0\n            },\n            \"weather\": [\n                {\n                    \"id\": 803,\n                    \"main\": \"Clouds\",\n                    \"description\": \"broken clouds\",\n                    \"icon\": \"04d\"\n                }\n            ],\n            \"clouds\": {\n                \"all\": 77\n            },\n            \"wind\": {\n                \"speed\": 3.26,\n                \"deg\": 136,\n                \"gust\": 6.78\n            },\n            \"visibility\": 10000,\n            \"pop\": 0,\n            \"sys\": {\n                \"pod\": \"d\"\n            },\n            \"dt_txt\": \"2023-05-04 18:00:00\"\n        },\n        {\n            \"dt\": 1683234000,\n            \"main\": {\n                \"temp\": 286.93,\n                \"feels_like\": 286.66,\n                \"temp_min\": 286.93,\n                \"temp_max\": 286.93,\n                \"pressure\": 1015,\n                \"sea_level\": 1015,\n                \"grnd_level\": 1012,\n                \"humidity\": 88,\n                \"temp_kf\": 0\n            },\n            \"weather\": [\n                {\n                    \"id\": 500,\n                    \"main\": \"Rain\",\n                    \"description\": \"light rain\",\n                    \"icon\": \"10n\"\n                }\n            ],\n            \"clouds\": {\n                \"all\": 69\n            },\n            \"wind\": {\n                \"speed\": 2.06,\n                \"deg\": 173,\n                \"gust\": 6.01\n            },\n            \"visibility\": 10000,\n            \"pop\": 0.47,\n            \"rain\": {\n                \"3h\": 0.24\n            },\n            \"sys\": {\n                \"pod\": \"n\"\n            },\n            \"dt_txt\": \"2023-05-04 21:00:00\"\n        },\n        {\n            \"dt\": 1683244800,\n            \"main\": {\n                \"temp\": 285.62,\n                \"feels_like\": 285.46,\n                \"temp_min\": 285.62,\n                \"temp_max\": 285.62,\n                \"pressure\": 1015,\n                \"sea_level\": 1015,\n                \"grnd_level\": 1012,\n                \"humidity\": 97,\n                \"temp_kf\": 0\n            },\n            \"weather\": [\n                {\n                    \"id\": 501,\n                    \"main\": \"Rain\",\n                    \"description\": \"moderate rain\",\n                    \"icon\": \"10n\"\n                }\n            ],\n            \"clouds\": {\n                \"all\": 83\n            },\n            \"wind\": {\n                \"speed\": 3.77,\n                \"deg\": 234,\n                \"gust\": 9.48\n            },\n            \"visibility\": 10000,\n            \"pop\": 1,\n            \"rain\": {\n                \"3h\": 4.16\n            },\n            \"sys\": {\n                \"pod\": \"n\"\n            },\n            \"dt_txt\": \"2023-05-05 00:00:00\"\n        },\n        {\n            \"dt\": 1683255600,\n            \"main\": {\n                \"temp\": 284.64,\n                \"feels_like\": 284.25,\n                \"temp_min\": 284.64,\n                \"temp_max\": 284.64,\n                \"pressure\": 1016,\n                \"sea_level\": 1016,\n                \"grnd_level\": 1013,\n                \"humidity\": 92,\n                \"temp_kf\": 0\n            },\n            \"weather\": [\n                {\n                    \"id\": 804,\n                    \"main\": \"Clouds\",\n                    \"description\": \"overcast clouds\",\n                    \"icon\": \"04n\"\n                }\n            ],\n            \"clouds\": {\n                \"all\": 88\n            },\n            \"wind\": {\n                \"speed\": 4.32,\n                \"deg\": 230,\n                \"gust\": 8.53\n            },\n            \"visibility\": 10000,\n            \"pop\": 0.07,\n            \"sys\": {\n                \"pod\": \"n\"\n            },\n            \"dt_txt\": \"2023-05-05 03:00:00\"\n        },\n        {\n            \"dt\": 1683266400,\n            \"main\": {\n                \"temp\": 285.16,\n                \"feels_like\": 284.66,\n                \"temp_min\": 285.16,\n                \"temp_max\": 285.16,\n                \"pressure\": 1016,\n                \"sea_level\": 1016,\n                \"grnd_level\": 1013,\n                \"humidity\": 86,\n                \"temp_kf\": 0\n            },\n            \"weather\": [\n                {\n                    \"id\": 804,\n                    \"main\": \"Clouds\",\n                    \"description\": \"overcast clouds\",\n                    \"icon\": \"04d\"\n                }\n            ],\n            \"clouds\": {\n                \"all\": 94\n            },\n            \"wind\": {\n                \"speed\": 4.01,\n                \"deg\": 221,\n                \"gust\": 7.97\n            },\n            \"visibility\": 10000,\n            \"pop\": 0.03,\n            \"sys\": {\n                \"pod\": \"d\"\n            },\n            \"dt_txt\": \"2023-05-05 06:00:00\"\n        },\n        {\n            \"dt\": 1683277200,\n            \"main\": {\n                \"temp\": 286.15,\n                \"feels_like\": 285.7,\n                \"temp_min\": 286.15,\n                \"temp_max\": 286.15,\n                \"pressure\": 1017,\n                \"sea_level\": 1017,\n                \"grnd_level\": 1014,\n                \"humidity\": 84,\n                \"temp_kf\": 0\n            },\n            \"weather\": [\n                {\n                    \"id\": 804,\n                    \"main\": \"Clouds\",\n                    \"description\": \"overcast clouds\",\n                    \"icon\": \"04d\"\n                }\n            ],\n            \"clouds\": {\n                \"all\": 100\n            },\n            \"wind\": {\n                \"speed\": 4.31,\n                \"deg\": 212,\n                \"gust\": 8.83\n            },\n            \"visibility\": 10000,\n            \"pop\": 0,\n            \"sys\": {\n                \"pod\": \"d\"\n            },\n            \"dt_txt\": \"2023-05-05 09:00:00\"\n        },\n        {\n            \"dt\": 1683288000,\n            \"main\": {\n                \"temp\": 290.66,\n                \"feels_like\": 289.95,\n                \"temp_min\": 290.66,\n                \"temp_max\": 290.66,\n                \"pressure\": 1016,\n                \"sea_level\": 1016,\n                \"grnd_level\": 1013,\n                \"humidity\": 57,\n                \"temp_kf\": 0\n            },\n            \"weather\": [\n                {\n                    \"id\": 804,\n                    \"main\": \"Clouds\",\n                    \"description\": \"overcast clouds\",\n                    \"icon\": \"04d\"\n                }\n            ],\n            \"clouds\": {\n                \"all\": 100\n            },\n            \"wind\": {\n                \"speed\": 5.35,\n                \"deg\": 225,\n                \"gust\": 8.23\n            },\n            \"visibility\": 10000,\n            \"pop\": 0,\n            \"sys\": {\n                \"pod\": \"d\"\n            },\n            \"dt_txt\": \"2023-05-05 12:00:00\"\n        },\n        {\n            \"dt\": 1683298800,\n            \"main\": {\n                \"temp\": 288.95,\n                \"feels_like\": 288.26,\n                \"temp_min\": 288.95,\n                \"temp_max\": 288.95,\n                \"pressure\": 1016,\n                \"sea_level\": 1016,\n                \"grnd_level\": 1013,\n                \"humidity\": 64,\n                \"temp_kf\": 0\n            },\n            \"weather\": [\n                {\n                    \"id\": 804,\n                    \"main\": \"Clouds\",\n                    \"description\": \"overcast clouds\",\n                    \"icon\": \"04d\"\n                }\n            ],\n            \"clouds\": {\n                \"all\": 97\n            },\n            \"wind\": {\n                \"speed\": 4.84,\n                \"deg\": 219,\n                \"gust\": 9.1\n            },\n            \"visibility\": 10000,\n            \"pop\": 0.32,\n            \"sys\": {\n                \"pod\": \"d\"\n            },\n            \"dt_txt\": \"2023-05-05 15:00:00\"\n        },\n        {\n            \"dt\": 1683309600,\n            \"main\": {\n                \"temp\": 287.86,\n                \"feels_like\": 287.32,\n                \"temp_min\": 287.86,\n                \"temp_max\": 287.86,\n                \"pressure\": 1016,\n                \"sea_level\": 1016,\n                \"grnd_level\": 1013,\n                \"humidity\": 74,\n                \"temp_kf\": 0\n            },\n            \"weather\": [\n                {\n                    \"id\": 804,\n                    \"main\": \"Clouds\",\n                    \"description\": \"overcast clouds\",\n                    \"icon\": \"04d\"\n                }\n            ],\n            \"clouds\": {\n                \"all\": 98\n            },\n            \"wind\": {\n                \"speed\": 3.24,\n                \"deg\": 189,\n                \"gust\": 7.84\n            },\n            \"visibility\": 10000,\n            \"pop\": 0.08,\n            \"sys\": {\n                \"pod\": \"d\"\n            },\n            \"dt_txt\": \"2023-05-05 18:00:00\"\n        },\n        {\n            \"dt\": 1683320400,\n            \"main\": {\n                \"temp\": 286.04,\n                \"feels_like\": 285.76,\n                \"temp_min\": 286.04,\n                \"temp_max\": 286.04,\n                \"pressure\": 1015,\n                \"sea_level\": 1015,\n                \"grnd_level\": 1012,\n                \"humidity\": 91,\n                \"temp_kf\": 0\n            },\n            \"weather\": [\n                {\n                    \"id\": 500,\n                    \"main\": \"Rain\",\n                    \"description\": \"light rain\",\n                    \"icon\": \"10n\"\n                }\n            ],\n            \"clouds\": {\n                \"all\": 100\n            },\n            \"wind\": {\n                \"speed\": 3.05,\n                \"deg\": 143,\n                \"gust\": 7.2\n            },\n            \"visibility\": 10000,\n            \"pop\": 0.61,\n            \"rain\": {\n                \"3h\": 0.34\n            },\n            \"sys\": {\n                \"pod\": \"n\"\n            },\n            \"dt_txt\": \"2023-05-05 21:00:00\"\n        },\n        {\n            \"dt\": 1683331200,\n            \"main\": {\n                \"temp\": 285.62,\n                \"feels_like\": 285.35,\n                \"temp_min\": 285.62,\n                \"temp_max\": 285.62,\n                \"pressure\": 1013,\n                \"sea_level\": 1013,\n                \"grnd_level\": 1010,\n                \"humidity\": 93,\n                \"temp_kf\": 0\n            },\n            \"weather\": [\n                {\n                    \"id\": 500,\n                    \"main\": \"Rain\",\n                    \"description\": \"light rain\",\n                    \"icon\": \"10n\"\n                }\n            ],\n            \"clouds\": {\n                \"all\": 100\n            },\n            \"wind\": {\n                \"speed\": 3.36,\n                \"deg\": 146,\n                \"gust\": 10.7\n            },\n            \"visibility\": 10000,\n            \"pop\": 0.8,\n            \"rain\": {\n                \"3h\": 1.14\n            },\n            \"sys\": {\n                \"pod\": \"n\"\n            },\n            \"dt_txt\": \"2023-05-06 00:00:00\"\n        },\n        {\n            \"dt\": 1683342000,\n            \"main\": {\n                \"temp\": 285.66,\n                \"feels_like\": 285.5,\n                \"temp_min\": 285.66,\n                \"temp_max\": 285.66,\n                \"pressure\": 1012,\n                \"sea_level\": 1012,\n                \"grnd_level\": 1009,\n                \"humidity\": 97,\n                \"temp_kf\": 0\n            },\n            \"weather\": [\n                {\n                    \"id\": 500,\n                    \"main\": \"Rain\",\n                    \"description\": \"light rain\",\n                    \"icon\": \"10n\"\n                }\n            ],\n            \"clouds\": {\n                \"all\": 100\n            },\n            \"wind\": {\n                \"speed\": 3.41,\n                \"deg\": 138,\n                \"gust\": 9.44\n            },\n            \"visibility\": 10000,\n            \"pop\": 1,\n            \"rain\": {\n                \"3h\": 1.89\n            },\n            \"sys\": {\n                \"pod\": \"n\"\n            },\n            \"dt_txt\": \"2023-05-06 03:00:00\"\n        },\n        {\n            \"dt\": 1683352800,\n            \"main\": {\n                \"temp\": 286.26,\n                \"feels_like\": 286.16,\n                \"temp_min\": 286.26,\n                \"temp_max\": 286.26,\n                \"pressure\": 1010,\n                \"sea_level\": 1010,\n                \"grnd_level\": 1007,\n                \"humidity\": 97,\n                \"temp_kf\": 0\n            },\n            \"weather\": [\n                {\n                    \"id\": 500,\n                    \"main\": \"Rain\",\n                    \"description\": \"light rain\",\n                    \"icon\": \"10d\"\n                }\n            ],\n            \"clouds\": {\n                \"all\": 100\n            },\n            \"wind\": {\n                \"speed\": 4.44,\n                \"deg\": 163,\n                \"gust\": 11.97\n            },\n            \"visibility\": 10000,\n            \"pop\": 1,\n            \"rain\": {\n                \"3h\": 1.29\n            },\n            \"sys\": {\n                \"pod\": \"d\"\n            },\n            \"dt_txt\": \"2023-05-06 06:00:00\"\n        },\n        {\n            \"dt\": 1683363600,\n            \"main\": {\n                \"temp\": 288.9,\n                \"feels_like\": 288.75,\n                \"temp_min\": 288.9,\n                \"temp_max\": 288.9,\n                \"pressure\": 1009,\n                \"sea_level\": 1009,\n                \"grnd_level\": 1006,\n                \"humidity\": 85,\n                \"temp_kf\": 0\n            },\n            \"weather\": [\n                {\n                    \"id\": 804,\n                    \"main\": \"Clouds\",\n                    \"description\": \"overcast clouds\",\n                    \"icon\": \"04d\"\n                }\n            ],\n            \"clouds\": {\n                \"all\": 100\n            },\n            \"wind\": {\n                \"speed\": 3.93,\n                \"deg\": 187,\n                \"gust\": 7.3\n            },\n            \"visibility\": 10000,\n            \"pop\": 0,\n            \"sys\": {\n                \"pod\": \"d\"\n            },\n            \"dt_txt\": \"2023-05-06 09:00:00\"\n        },\n        {\n            \"dt\": 1683374400,\n            \"main\": {\n                \"temp\": 290,\n                \"feels_like\": 289.86,\n                \"temp_min\": 290,\n                \"temp_max\": 290,\n                \"pressure\": 1009,\n                \"sea_level\": 1009,\n                \"grnd_level\": 1006,\n                \"humidity\": 81,\n                \"temp_kf\": 0\n            },\n            \"weather\": [\n                {\n                    \"id\": 500,\n                    \"main\": \"Rain\",\n                    \"description\": \"light rain\",\n                    \"icon\": \"10d\"\n                }\n            ],\n            \"clouds\": {\n                \"all\": 100\n            },\n            \"wind\": {\n                \"speed\": 5.05,\n                \"deg\": 201,\n                \"gust\": 8.21\n            },\n            \"visibility\": 10000,\n            \"pop\": 0.61,\n            \"rain\": {\n                \"3h\": 0.76\n            },\n            \"sys\": {\n                \"pod\": \"d\"\n            },\n            \"dt_txt\": \"2023-05-06 12:00:00\"\n        }\n    ],\n    \"city\": {\n        \"id\": 2643743,\n        \"name\": \"London\",\n        \"coord\": {\n            \"lat\": 51.5085,\n            \"lon\": -0.1257\n        },\n        \"country\": \"GB\",\n        \"population\": 1000000,\n        \"timezone\": 3600,\n        \"sunrise\": 1682915578,\n        \"sunset\": 1682968927\n    }\n}"
						}
					]
				},
				{
					"name": "Get forecast data invalid city_name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseJsonData = JSON.parse(responseBody);",
									"pm.test(\"Get forecast 5days/3hours invalid city_name returns the status code 400\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"pm.test(\"Get forecast 5days/3hours invalid city_name returns expected response body code\", () => {",
									" ",
									"  const expectedResponseBodyCode = \"404\";",
									"  const actualResponseBodyCode = responseJsonData.cod;",
									"  pm.expect(actualResponseBodyCode).to.eql(expectedResponseBodyCode,`Get forecast 5days/3hours invalid city_name, We expected response Body Status code ${expectedResponseBodyCode} but got ${actualResponseBodyCode}`);",
									"  ",
									"});",
									"",
									"pm.test(\"Get forecast 5days/3hours invalid city_name returns expected  response body Message\", function () {",
									"  const expectedResponseBodyMessage = \"city not found\";",
									"  const actualResponseBodyMessage = responseJsonData.message;",
									"  pm.expect(actualResponseBodyMessage).to.eql(expectedResponseBodyMessage, `Get forecast 5days/3hours invalid city_name ,  expected response Body Message ${expectedResponseBodyMessage} but got :::> ${actualResponseBodyMessage}`); ",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const city_names = [\"Nairobitest\",\"Londontest\",\"Paris6767\"];",
									"const city_name_indexvalue = Math.round(Math.random()*(city_names.length-1));",
									"var city = city_names[city_name_indexvalue];",
									"const temperature=[\"standard\",\"metric\",\"imperial\"];",
									"const temp = Math.round(Math.random()*(temperature.length-1));",
									"pm.environment.set(\"temperature_unit\",temp);",
									"pm.environment.set(\"city_name\", city)",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{get_weather_base_url}}/data/{{version}}/forecast?q={{city_name}}&appid={{api_keys}}&units={{temperature_unit}}",
							"host": [
								"{{get_weather_base_url}}"
							],
							"path": [
								"data",
								"{{version}}",
								"forecast"
							],
							"query": [
								{
									"key": "q",
									"value": "{{city_name}}"
								},
								{
									"key": "appid",
									"value": "{{api_keys}}"
								},
								{
									"key": "units",
									"value": "{{temperature_unit}}"
								},
								{
									"key": "{{api",
									"value": "",
									"disabled": true
								}
							]
						},
						"description": "Get a valid response when invalid cityname value sent"
					},
					"response": [
						{
							"name": "Get forecast data invalid city_name",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://api.openweathermap.org/data/2.5/forecast?q=&appid=1712846f0f291932f5e652846e7289d2&units=",
									"protocol": "https",
									"host": [
										"api",
										"openweathermap",
										"org"
									],
									"path": [
										"data",
										"2.5",
										"forecast"
									],
									"query": [
										{
											"key": "q",
											"value": ""
										},
										{
											"key": "appid",
											"value": "1712846f0f291932f5e652846e7289d2"
										},
										{
											"key": "units",
											"value": ""
										},
										{
											"key": "{{api",
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "openresty"
								},
								{
									"key": "Date",
									"value": "Mon, 01 May 2023 12:50:53 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "40"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "X-Cache-Key",
									"value": "/data/2.5/forecast?q=londontest&units=2"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Access-Control-Allow-Methods",
									"value": "GET, POST"
								}
							],
							"cookie": [],
							"body": "{\n    \"cod\": \"404\",\n    \"message\": \"city not found\"\n}"
						}
					]
				},
				{
					"name": "Get forecast data missing city_name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseJsonData = JSON.parse(responseBody);",
									"pm.test(\"Get forecast data invalid city_name returns the status code 400\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"pm.test(\"Get forecast data missing/null city_name returns expected response body code\", () => {",
									" ",
									"  const expectedResponseBodyCode = \"404\";",
									"  const actualResponseBodyCode = responseJsonData.cod;",
									"  pm.expect(actualResponseBodyCode).to.eql(expectedResponseBodyCode,`Get forecast data missing/null city_name, We expected response Body Status code ${expectedResponseBodyCode} but got ${actualResponseBodyCode}`);",
									"  ",
									"});",
									"",
									"pm.test(\"Get forecast data missing/null city_name returns expected  response body Message\", function () {",
									"  const expectedResponseBodyMessage = \"city not found\";",
									"  const actualResponseBodyMessage = responseJsonData.message;",
									"  pm.expect(actualResponseBodyMessage).to.eql(expectedResponseBodyMessage, `Get forecast data missing/null city_name ,  expected response Body Message ${expectedResponseBodyMessage} but got :::> ${actualResponseBodyMessage}`); ",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const temperature=[\"standard\",\"metric\",\"imperial\"];",
									"const temp = Math.round(Math.random()*(temperature.length-1));",
									"pm.environment.set(\"temperature_unit\",temp);",
									"pm.environment.set(\"city_name\", )",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{get_weather_base_url}}/data/{{version}}/forecast?q={{city_name}}&appid={{api_keys}}&units={{temperature_unit}}",
							"host": [
								"{{get_weather_base_url}}"
							],
							"path": [
								"data",
								"{{version}}",
								"forecast"
							],
							"query": [
								{
									"key": "q",
									"value": "{{city_name}}"
								},
								{
									"key": "appid",
									"value": "{{api_keys}}"
								},
								{
									"key": "units",
									"value": "{{temperature_unit}}"
								},
								{
									"key": "{{api",
									"value": "",
									"disabled": true
								}
							]
						},
						"description": "Get a valid response when missing cityname value sent"
					},
					"response": [
						{
							"name": "Get forecast data missing city_name",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://api.openweathermap.org/data/2.5/forecast?q=&appid=1712846f0f291932f5e652846e7289d2&units=",
									"protocol": "https",
									"host": [
										"api",
										"openweathermap",
										"org"
									],
									"path": [
										"data",
										"2.5",
										"forecast"
									],
									"query": [
										{
											"key": "q",
											"value": ""
										},
										{
											"key": "appid",
											"value": "1712846f0f291932f5e652846e7289d2"
										},
										{
											"key": "units",
											"value": ""
										},
										{
											"key": "{{api",
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "openresty"
								},
								{
									"key": "Date",
									"value": "Mon, 01 May 2023 12:50:59 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "40"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "X-Cache-Key",
									"value": "/data/2.5/forecast?q=null&units=0"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Access-Control-Allow-Methods",
									"value": "GET, POST"
								}
							],
							"cookie": [],
							"body": "{\n    \"cod\": \"404\",\n    \"message\": \"city not found\"\n}"
						}
					]
				},
				{
					"name": "Get forecast  data invalid appid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseJsonData = JSON.parse(responseBody);",
									"pm.test(\"Get forecast 5days/3hours data invalid appid endpoint using country code and city with invalid appID returns expected http code\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"pm.test(\"Get forecast 5days/3hours endpoint country code and city with invalid appID returns expected response body code\", () => {",
									" ",
									"  const expectedResponseBodyCode = 401;",
									"  const actualResponseBodyCode = responseJsonData.cod;",
									"  pm.expect(actualResponseBodyCode).to.eql(expectedResponseBodyCode, `Get forecast 5days/3hours endpoint with invalid appid value ,  expected response Body Message ${expectedResponseBodyCode} but got :::> ${actualResponseBodyCode}`);",
									"  ",
									"});",
									"",
									"pm.test(\"Get forecast 5days/3hours endpoint with invalid appID returns expected response body Message\", function () {",
									"  const expectedResponseBodyMessage = \"Invalid API key. Please see\";",
									"  const actualResponseBodyMessage = responseJsonData.message;",
									"  //asserting using part of the response message since the response message is big/huge",
									"  pm.expect(actualResponseBodyMessage).to.include(expectedResponseBodyMessage, `Get forecast 5days/3hours endpoint with invalid appid value ,  expected response Body Message ${expectedResponseBodyMessage} but got :::> ${actualResponseBodyMessage}`); ",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const city_names = [[\"Nairobi\",\"KE\"] , [\"London\" , \"uk\"] , [\"Paris\",\"FR\"]];",
									"const city_name_indexvalue = Math.round(Math.random()*(city_names.length-1));",
									"var city = city_names[city_name_indexvalue][0];",
									"var country_code = city_names[city_name_indexvalue][1];",
									"const temperature=[\"standard\",\"metric\",\"imperial\"];",
									"const temp = Math.round(Math.random()*(temperature.length-1));",
									"pm.environment.set(\"temperature_unit\",temp);",
									"pm.environment.set(\"city_name\", city)",
									"pm.environment.set(\"country_code\", country_code)",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{get_weather_base_url}}/data/{{version}}/weather?q={{city_name}},{{country_code}}&appid={{api_keys}}_test&units={{temperature_unit}}",
							"host": [
								"{{get_weather_base_url}}"
							],
							"path": [
								"data",
								"{{version}}",
								"weather"
							],
							"query": [
								{
									"key": "q",
									"value": "{{city_name}},{{country_code}}"
								},
								{
									"key": "appid",
									"value": "{{api_keys}}_test"
								},
								{
									"key": "units",
									"value": "{{temperature_unit}}"
								},
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						},
						"description": "Get a valid response when invalid appid value sent"
					},
					"response": [
						{
							"name": "Get forecast  data invalid appid",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://api.openweathermap.org/data/2.5/weather?q=,&appid=1712846f0f291932f5e652846e7289d2_test&units=",
									"protocol": "https",
									"host": [
										"api",
										"openweathermap",
										"org"
									],
									"path": [
										"data",
										"2.5",
										"weather"
									],
									"query": [
										{
											"key": "q",
											"value": ","
										},
										{
											"key": "appid",
											"value": "1712846f0f291932f5e652846e7289d2_test"
										},
										{
											"key": "units",
											"value": ""
										},
										{
											"key": "",
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "openresty"
								},
								{
									"key": "Date",
									"value": "Mon, 01 May 2023 12:51:05 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "108"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "X-Cache-Key",
									"value": "/data/2.5/weather?q=nairobi,ke&units=1"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Access-Control-Allow-Methods",
									"value": "GET, POST"
								}
							],
							"cookie": [],
							"body": "{\n    \"cod\": 401,\n    \"message\": \"Invalid API key. Please see https://openweathermap.org/faq#error401 for more info.\"\n}"
						}
					]
				},
				{
					"name": "Get forecast via city_name missing /null appid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseJsonData = JSON.parse(responseBody);",
									"pm.test(\"Get forecast via city_name endpoint with null/empty appID returns expected http code\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"pm.test(\"Get forecast via city_name endpoint with null/empty appID returns expected response body code\", () => {",
									" ",
									"  const expectedResponseBodyCode = 401;",
									"  const actualResponseBodyCode = responseJsonData.cod;",
									"  pm.expect(actualResponseBodyCode).to.eql(expectedResponseBodyCode, `Get forecast via city_name endpoint with null/empty appid value ,  expected response Body Message ${expectedResponseBodyCode} but got :::> ${actualResponseBodyCode}`);",
									"  ",
									"});",
									"",
									"pm.test(\"Get forecast via city_name endpoint with null/invalid appID returns expected response body Message\", function () {",
									"  const expectedResponseBodyMessage = \"Invalid API key. Please see\";",
									"  const actualResponseBodyMessage = responseJsonData.message;",
									"  //asserting using part of the response message since the response message is big/huge",
									"  pm.expect(actualResponseBodyMessage).to.include(expectedResponseBodyMessage, `Get forecast via city_name endpoint with missing/null appid value ,  expected response Body Message ${expectedResponseBodyMessage} but got :::> ${actualResponseBodyMessage}`); ",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const city_names = [[\"Nairobi\",\"KE\"] , [\"London\" , \"uk\"] , [\"Paris\",\"FR\"]];",
									"const city_name_indexvalue = Math.round(Math.random()*(city_names.length-1));",
									"var city = city_names[city_name_indexvalue][0];",
									"var country_code = city_names[city_name_indexvalue][1];",
									"const temperature=[\"standard\",\"metric\",\"imperial\"];",
									"const temp = Math.round(Math.random()*(temperature.length-1));",
									"pm.environment.set(\"temperature_unit\",temp);",
									"pm.environment.set(\"city_name\", city)",
									"pm.environment.set(\"country_code\", country_code)",
									"pm.environment.set(\"api_keys_null\", )",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{get_weather_base_url}}/data/{{version}}/weather?q={{city_name}},{{country_code}}&appid={{api_keys_null}}&units={{temperature_unit}}",
							"host": [
								"{{get_weather_base_url}}"
							],
							"path": [
								"data",
								"{{version}}",
								"weather"
							],
							"query": [
								{
									"key": "q",
									"value": "{{city_name}},{{country_code}}"
								},
								{
									"key": "appid",
									"value": "{{api_keys_null}}"
								},
								{
									"key": "units",
									"value": "{{temperature_unit}}"
								},
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						},
						"description": "Get a valid response when null/invalid cityname value sent"
					},
					"response": [
						{
							"name": "Get forecast via city_name missing /null appid",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{get_weather_base_url}}/data/{{version}}/weather?q={{city_name}},{{country_code}}&appid={{api_keys_null}}&units={{temperature_unit}}",
									"host": [
										"{{get_weather_base_url}}"
									],
									"path": [
										"data",
										"{{version}}",
										"weather"
									],
									"query": [
										{
											"key": "q",
											"value": "{{city_name}},{{country_code}}"
										},
										{
											"key": "appid",
											"value": "{{api_keys_null}}"
										},
										{
											"key": "units",
											"value": "{{temperature_unit}}"
										},
										{
											"key": "",
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "openresty"
								},
								{
									"key": "Date",
									"value": "Mon, 01 May 2023 12:51:14 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "108"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "X-Cache-Key",
									"value": "/data/2.5/weather?q=london,uk&units=1"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Access-Control-Allow-Methods",
									"value": "GET, POST"
								}
							],
							"cookie": [],
							"body": "{\n    \"cod\": 401,\n    \"message\": \"Invalid API key. Please see https://openweathermap.org/faq#error401 for more info.\"\n}"
						}
					]
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "api_keys",
			"value": "1712846f0f291932f5e652846e7289d2",
			"type": "string"
		},
		{
			"key": "weather_forecast_base_url",
			"value": "https://pro.openweathermap.org",
			"type": "string"
		},
		{
			"key": "get_weather_base_url",
			"value": "https://api.openweathermap.org",
			"type": "string"
		},
		{
			"key": "version",
			"value": "2.5",
			"type": "string"
		}
	]
}